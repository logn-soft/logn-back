// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
	"github.com/logn-soft/logn-back/internal/ent/technology"
	"github.com/logn-soft/logn-back/internal/ent/technologylevel"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"
)

// TechnologyLevelUpdate is the builder for updating TechnologyLevel entities.
type TechnologyLevelUpdate struct {
	config
	hooks    []Hook
	mutation *TechnologyLevelMutation
}

// Where appends a list predicates to the TechnologyLevelUpdate builder.
func (tlu *TechnologyLevelUpdate) Where(ps ...predicate.TechnologyLevel) *TechnologyLevelUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetLevel sets the "level" field.
func (tlu *TechnologyLevelUpdate) SetLevel(i int) *TechnologyLevelUpdate {
	tlu.mutation.ResetLevel()
	tlu.mutation.SetLevel(i)
	return tlu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (tlu *TechnologyLevelUpdate) SetNillableLevel(i *int) *TechnologyLevelUpdate {
	if i != nil {
		tlu.SetLevel(*i)
	}
	return tlu
}

// AddLevel adds i to the "level" field.
func (tlu *TechnologyLevelUpdate) AddLevel(i int) *TechnologyLevelUpdate {
	tlu.mutation.AddLevel(i)
	return tlu
}

// SetTechnologyID sets the "technology_id" field.
func (tlu *TechnologyLevelUpdate) SetTechnologyID(i int) *TechnologyLevelUpdate {
	tlu.mutation.SetTechnologyID(i)
	return tlu
}

// SetVacancyID sets the "vacancy_id" field.
func (tlu *TechnologyLevelUpdate) SetVacancyID(i int) *TechnologyLevelUpdate {
	tlu.mutation.SetVacancyID(i)
	return tlu
}

// SetCreatedAt sets the "created_at" field.
func (tlu *TechnologyLevelUpdate) SetCreatedAt(t time.Time) *TechnologyLevelUpdate {
	tlu.mutation.SetCreatedAt(t)
	return tlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlu *TechnologyLevelUpdate) SetNillableCreatedAt(t *time.Time) *TechnologyLevelUpdate {
	if t != nil {
		tlu.SetCreatedAt(*t)
	}
	return tlu
}

// SetTechnology sets the "technology" edge to the Technology entity.
func (tlu *TechnologyLevelUpdate) SetTechnology(t *Technology) *TechnologyLevelUpdate {
	return tlu.SetTechnologyID(t.ID)
}

// SetVacancy sets the "vacancy" edge to the Vacancy entity.
func (tlu *TechnologyLevelUpdate) SetVacancy(v *Vacancy) *TechnologyLevelUpdate {
	return tlu.SetVacancyID(v.ID)
}

// Mutation returns the TechnologyLevelMutation object of the builder.
func (tlu *TechnologyLevelUpdate) Mutation() *TechnologyLevelMutation {
	return tlu.mutation
}

// ClearTechnology clears the "technology" edge to the Technology entity.
func (tlu *TechnologyLevelUpdate) ClearTechnology() *TechnologyLevelUpdate {
	tlu.mutation.ClearTechnology()
	return tlu
}

// ClearVacancy clears the "vacancy" edge to the Vacancy entity.
func (tlu *TechnologyLevelUpdate) ClearVacancy() *TechnologyLevelUpdate {
	tlu.mutation.ClearVacancy()
	return tlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TechnologyLevelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TechnologyLevelMutation](ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TechnologyLevelUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TechnologyLevelUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TechnologyLevelUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TechnologyLevelUpdate) check() error {
	if v, ok := tlu.mutation.Level(); ok {
		if err := technologylevel.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "TechnologyLevel.level": %w`, err)}
		}
	}
	if _, ok := tlu.mutation.TechnologyID(); tlu.mutation.TechnologyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TechnologyLevel.technology"`)
	}
	if _, ok := tlu.mutation.VacancyID(); tlu.mutation.VacancyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TechnologyLevel.vacancy"`)
	}
	return nil
}

func (tlu *TechnologyLevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tlu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   technologylevel.Table,
			Columns: technologylevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technologylevel.FieldID,
			},
		},
	}
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.Level(); ok {
		_spec.SetField(technologylevel.FieldLevel, field.TypeInt, value)
	}
	if value, ok := tlu.mutation.AddedLevel(); ok {
		_spec.AddField(technologylevel.FieldLevel, field.TypeInt, value)
	}
	if value, ok := tlu.mutation.CreatedAt(); ok {
		_spec.SetField(technologylevel.FieldCreatedAt, field.TypeTime, value)
	}
	if tlu.mutation.TechnologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.TechnologyTable,
			Columns: []string{technologylevel.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technology.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.TechnologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.TechnologyTable,
			Columns: []string{technologylevel.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tlu.mutation.VacancyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.VacancyTable,
			Columns: []string{technologylevel.VacancyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.VacancyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.VacancyTable,
			Columns: []string{technologylevel.VacancyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technologylevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TechnologyLevelUpdateOne is the builder for updating a single TechnologyLevel entity.
type TechnologyLevelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TechnologyLevelMutation
}

// SetLevel sets the "level" field.
func (tluo *TechnologyLevelUpdateOne) SetLevel(i int) *TechnologyLevelUpdateOne {
	tluo.mutation.ResetLevel()
	tluo.mutation.SetLevel(i)
	return tluo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (tluo *TechnologyLevelUpdateOne) SetNillableLevel(i *int) *TechnologyLevelUpdateOne {
	if i != nil {
		tluo.SetLevel(*i)
	}
	return tluo
}

// AddLevel adds i to the "level" field.
func (tluo *TechnologyLevelUpdateOne) AddLevel(i int) *TechnologyLevelUpdateOne {
	tluo.mutation.AddLevel(i)
	return tluo
}

// SetTechnologyID sets the "technology_id" field.
func (tluo *TechnologyLevelUpdateOne) SetTechnologyID(i int) *TechnologyLevelUpdateOne {
	tluo.mutation.SetTechnologyID(i)
	return tluo
}

// SetVacancyID sets the "vacancy_id" field.
func (tluo *TechnologyLevelUpdateOne) SetVacancyID(i int) *TechnologyLevelUpdateOne {
	tluo.mutation.SetVacancyID(i)
	return tluo
}

// SetCreatedAt sets the "created_at" field.
func (tluo *TechnologyLevelUpdateOne) SetCreatedAt(t time.Time) *TechnologyLevelUpdateOne {
	tluo.mutation.SetCreatedAt(t)
	return tluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tluo *TechnologyLevelUpdateOne) SetNillableCreatedAt(t *time.Time) *TechnologyLevelUpdateOne {
	if t != nil {
		tluo.SetCreatedAt(*t)
	}
	return tluo
}

// SetTechnology sets the "technology" edge to the Technology entity.
func (tluo *TechnologyLevelUpdateOne) SetTechnology(t *Technology) *TechnologyLevelUpdateOne {
	return tluo.SetTechnologyID(t.ID)
}

// SetVacancy sets the "vacancy" edge to the Vacancy entity.
func (tluo *TechnologyLevelUpdateOne) SetVacancy(v *Vacancy) *TechnologyLevelUpdateOne {
	return tluo.SetVacancyID(v.ID)
}

// Mutation returns the TechnologyLevelMutation object of the builder.
func (tluo *TechnologyLevelUpdateOne) Mutation() *TechnologyLevelMutation {
	return tluo.mutation
}

// ClearTechnology clears the "technology" edge to the Technology entity.
func (tluo *TechnologyLevelUpdateOne) ClearTechnology() *TechnologyLevelUpdateOne {
	tluo.mutation.ClearTechnology()
	return tluo
}

// ClearVacancy clears the "vacancy" edge to the Vacancy entity.
func (tluo *TechnologyLevelUpdateOne) ClearVacancy() *TechnologyLevelUpdateOne {
	tluo.mutation.ClearVacancy()
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TechnologyLevelUpdateOne) Select(field string, fields ...string) *TechnologyLevelUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TechnologyLevel entity.
func (tluo *TechnologyLevelUpdateOne) Save(ctx context.Context) (*TechnologyLevel, error) {
	return withHooks[*TechnologyLevel, TechnologyLevelMutation](ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TechnologyLevelUpdateOne) SaveX(ctx context.Context) *TechnologyLevel {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TechnologyLevelUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TechnologyLevelUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TechnologyLevelUpdateOne) check() error {
	if v, ok := tluo.mutation.Level(); ok {
		if err := technologylevel.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "TechnologyLevel.level": %w`, err)}
		}
	}
	if _, ok := tluo.mutation.TechnologyID(); tluo.mutation.TechnologyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TechnologyLevel.technology"`)
	}
	if _, ok := tluo.mutation.VacancyID(); tluo.mutation.VacancyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TechnologyLevel.vacancy"`)
	}
	return nil
}

func (tluo *TechnologyLevelUpdateOne) sqlSave(ctx context.Context) (_node *TechnologyLevel, err error) {
	if err := tluo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   technologylevel.Table,
			Columns: technologylevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technologylevel.FieldID,
			},
		},
	}
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TechnologyLevel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, technologylevel.FieldID)
		for _, f := range fields {
			if !technologylevel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != technologylevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.Level(); ok {
		_spec.SetField(technologylevel.FieldLevel, field.TypeInt, value)
	}
	if value, ok := tluo.mutation.AddedLevel(); ok {
		_spec.AddField(technologylevel.FieldLevel, field.TypeInt, value)
	}
	if value, ok := tluo.mutation.CreatedAt(); ok {
		_spec.SetField(technologylevel.FieldCreatedAt, field.TypeTime, value)
	}
	if tluo.mutation.TechnologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.TechnologyTable,
			Columns: []string{technologylevel.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technology.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.TechnologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.TechnologyTable,
			Columns: []string{technologylevel.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tluo.mutation.VacancyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.VacancyTable,
			Columns: []string{technologylevel.VacancyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.VacancyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.VacancyTable,
			Columns: []string{technologylevel.VacancyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TechnologyLevel{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technologylevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
