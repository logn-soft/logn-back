// Code generated by ent, DO NOT EDIT.

package technologylevel

import (
	"time"
)

const (
	// Label holds the string label denoting the technologylevel type in the database.
	Label = "technology_level"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldTechnologyID holds the string denoting the technology_id field in the database.
	FieldTechnologyID = "technology_id"
	// FieldVacancyID holds the string denoting the vacancy_id field in the database.
	FieldVacancyID = "vacancy_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTechnology holds the string denoting the technology edge name in mutations.
	EdgeTechnology = "technology"
	// EdgeVacancy holds the string denoting the vacancy edge name in mutations.
	EdgeVacancy = "vacancy"
	// Table holds the table name of the technologylevel in the database.
	Table = "technology_levels"
	// TechnologyTable is the table that holds the technology relation/edge.
	TechnologyTable = "technology_levels"
	// TechnologyInverseTable is the table name for the Technology entity.
	// It exists in this package in order to avoid circular dependency with the "technology" package.
	TechnologyInverseTable = "technologies"
	// TechnologyColumn is the table column denoting the technology relation/edge.
	TechnologyColumn = "technology_id"
	// VacancyTable is the table that holds the vacancy relation/edge.
	VacancyTable = "technology_levels"
	// VacancyInverseTable is the table name for the Vacancy entity.
	// It exists in this package in order to avoid circular dependency with the "vacancy" package.
	VacancyInverseTable = "vacancies"
	// VacancyColumn is the table column denoting the vacancy relation/edge.
	VacancyColumn = "vacancy_id"
)

// Columns holds all SQL columns for technologylevel fields.
var Columns = []string{
	FieldID,
	FieldLevel,
	FieldTechnologyID,
	FieldVacancyID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLevel holds the default value on creation for the "level" field.
	DefaultLevel int
	// LevelValidator is a validator for the "level" field. It is called by the builders before save.
	LevelValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
