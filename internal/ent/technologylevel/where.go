// Code generated by ent, DO NOT EDIT.

package technologylevel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldLTE(FieldID, id))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldLevel, v))
}

// TechnologyID applies equality check predicate on the "technology_id" field. It's identical to TechnologyIDEQ.
func TechnologyID(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldTechnologyID, v))
}

// VacancyID applies equality check predicate on the "vacancy_id" field. It's identical to VacancyIDEQ.
func VacancyID(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldVacancyID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldCreatedAt, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldLTE(FieldLevel, v))
}

// TechnologyIDEQ applies the EQ predicate on the "technology_id" field.
func TechnologyIDEQ(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldTechnologyID, v))
}

// TechnologyIDNEQ applies the NEQ predicate on the "technology_id" field.
func TechnologyIDNEQ(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNEQ(FieldTechnologyID, v))
}

// TechnologyIDIn applies the In predicate on the "technology_id" field.
func TechnologyIDIn(vs ...int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldIn(FieldTechnologyID, vs...))
}

// TechnologyIDNotIn applies the NotIn predicate on the "technology_id" field.
func TechnologyIDNotIn(vs ...int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNotIn(FieldTechnologyID, vs...))
}

// VacancyIDEQ applies the EQ predicate on the "vacancy_id" field.
func VacancyIDEQ(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldVacancyID, v))
}

// VacancyIDNEQ applies the NEQ predicate on the "vacancy_id" field.
func VacancyIDNEQ(v int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNEQ(FieldVacancyID, v))
}

// VacancyIDIn applies the In predicate on the "vacancy_id" field.
func VacancyIDIn(vs ...int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldIn(FieldVacancyID, vs...))
}

// VacancyIDNotIn applies the NotIn predicate on the "vacancy_id" field.
func VacancyIDNotIn(vs ...int) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNotIn(FieldVacancyID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTechnology applies the HasEdge predicate on the "technology" edge.
func HasTechnology() predicate.TechnologyLevel {
	return predicate.TechnologyLevel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TechnologyTable, TechnologyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTechnologyWith applies the HasEdge predicate on the "technology" edge with a given conditions (other predicates).
func HasTechnologyWith(preds ...predicate.Technology) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TechnologyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TechnologyTable, TechnologyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVacancy applies the HasEdge predicate on the "vacancy" edge.
func HasVacancy() predicate.TechnologyLevel {
	return predicate.TechnologyLevel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VacancyTable, VacancyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVacancyWith applies the HasEdge predicate on the "vacancy" edge with a given conditions (other predicates).
func HasVacancyWith(preds ...predicate.Vacancy) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VacancyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VacancyTable, VacancyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TechnologyLevel) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TechnologyLevel) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TechnologyLevel) predicate.TechnologyLevel {
	return predicate.TechnologyLevel(func(s *sql.Selector) {
		p(s.Not())
	})
}
