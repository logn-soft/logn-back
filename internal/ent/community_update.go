// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/area"
	"github.com/logn-soft/logn-back/internal/ent/community"
	"github.com/logn-soft/logn-back/internal/ent/company"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
	"github.com/logn-soft/logn-back/internal/ent/social"
	"github.com/logn-soft/logn-back/internal/ent/user"
)

// CommunityUpdate is the builder for updating Community entities.
type CommunityUpdate struct {
	config
	hooks    []Hook
	mutation *CommunityMutation
}

// Where appends a list predicates to the CommunityUpdate builder.
func (cu *CommunityUpdate) Where(ps ...predicate.Community) *CommunityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CommunityUpdate) SetName(s string) *CommunityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetAbout sets the "about" field.
func (cu *CommunityUpdate) SetAbout(s string) *CommunityUpdate {
	cu.mutation.SetAbout(s)
	return cu
}

// SetMembers sets the "members" field.
func (cu *CommunityUpdate) SetMembers(i int) *CommunityUpdate {
	cu.mutation.ResetMembers()
	cu.mutation.SetMembers(i)
	return cu
}

// AddMembers adds i to the "members" field.
func (cu *CommunityUpdate) AddMembers(i int) *CommunityUpdate {
	cu.mutation.AddMembers(i)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CommunityUpdate) SetCreatedAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableCreatedAt(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// AddSocialIDs adds the "socials" edge to the Social entity by IDs.
func (cu *CommunityUpdate) AddSocialIDs(ids ...int) *CommunityUpdate {
	cu.mutation.AddSocialIDs(ids...)
	return cu
}

// AddSocials adds the "socials" edges to the Social entity.
func (cu *CommunityUpdate) AddSocials(s ...*Social) *CommunityUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSocialIDs(ids...)
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (cu *CommunityUpdate) AddCompanyIDs(ids ...int) *CommunityUpdate {
	cu.mutation.AddCompanyIDs(ids...)
	return cu
}

// AddCompanies adds the "companies" edges to the Company entity.
func (cu *CommunityUpdate) AddCompanies(c ...*Company) *CommunityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCompanyIDs(ids...)
}

// AddAreaIDs adds the "areas" edge to the Area entity by IDs.
func (cu *CommunityUpdate) AddAreaIDs(ids ...int) *CommunityUpdate {
	cu.mutation.AddAreaIDs(ids...)
	return cu
}

// AddAreas adds the "areas" edges to the Area entity.
func (cu *CommunityUpdate) AddAreas(a ...*Area) *CommunityUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAreaIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cu *CommunityUpdate) AddUserIDs(ids ...int) *CommunityUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUsers adds the "users" edges to the User entity.
func (cu *CommunityUpdate) AddUsers(u ...*User) *CommunityUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// Mutation returns the CommunityMutation object of the builder.
func (cu *CommunityUpdate) Mutation() *CommunityMutation {
	return cu.mutation
}

// ClearSocials clears all "socials" edges to the Social entity.
func (cu *CommunityUpdate) ClearSocials() *CommunityUpdate {
	cu.mutation.ClearSocials()
	return cu
}

// RemoveSocialIDs removes the "socials" edge to Social entities by IDs.
func (cu *CommunityUpdate) RemoveSocialIDs(ids ...int) *CommunityUpdate {
	cu.mutation.RemoveSocialIDs(ids...)
	return cu
}

// RemoveSocials removes "socials" edges to Social entities.
func (cu *CommunityUpdate) RemoveSocials(s ...*Social) *CommunityUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSocialIDs(ids...)
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (cu *CommunityUpdate) ClearCompanies() *CommunityUpdate {
	cu.mutation.ClearCompanies()
	return cu
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (cu *CommunityUpdate) RemoveCompanyIDs(ids ...int) *CommunityUpdate {
	cu.mutation.RemoveCompanyIDs(ids...)
	return cu
}

// RemoveCompanies removes "companies" edges to Company entities.
func (cu *CommunityUpdate) RemoveCompanies(c ...*Company) *CommunityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCompanyIDs(ids...)
}

// ClearAreas clears all "areas" edges to the Area entity.
func (cu *CommunityUpdate) ClearAreas() *CommunityUpdate {
	cu.mutation.ClearAreas()
	return cu
}

// RemoveAreaIDs removes the "areas" edge to Area entities by IDs.
func (cu *CommunityUpdate) RemoveAreaIDs(ids ...int) *CommunityUpdate {
	cu.mutation.RemoveAreaIDs(ids...)
	return cu
}

// RemoveAreas removes "areas" edges to Area entities.
func (cu *CommunityUpdate) RemoveAreas(a ...*Area) *CommunityUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAreaIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cu *CommunityUpdate) ClearUsers() *CommunityUpdate {
	cu.mutation.ClearUsers()
	return cu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cu *CommunityUpdate) RemoveUserIDs(ids ...int) *CommunityUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUsers removes "users" edges to User entities.
func (cu *CommunityUpdate) RemoveUsers(u ...*User) *CommunityUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommunityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CommunityMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommunityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommunityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommunityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommunityUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := community.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Community.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.About(); ok {
		if err := community.AboutValidator(v); err != nil {
			return &ValidationError{Name: "about", err: fmt.Errorf(`ent: validator failed for field "Community.about": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Members(); ok {
		if err := community.MembersValidator(v); err != nil {
			return &ValidationError{Name: "members", err: fmt.Errorf(`ent: validator failed for field "Community.members": %w`, err)}
		}
	}
	return nil
}

func (cu *CommunityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   community.Table,
			Columns: community.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: community.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(community.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.About(); ok {
		_spec.SetField(community.FieldAbout, field.TypeString, value)
	}
	if value, ok := cu.mutation.Members(); ok {
		_spec.SetField(community.FieldMembers, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMembers(); ok {
		_spec.AddField(community.FieldMembers, field.TypeInt, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(community.FieldCreatedAt, field.TypeTime, value)
	}
	if cu.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.SocialsTable,
			Columns: community.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSocialsIDs(); len(nodes) > 0 && !cu.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.SocialsTable,
			Columns: community.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SocialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.SocialsTable,
			Columns: community.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CompaniesTable,
			Columns: community.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !cu.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CompaniesTable,
			Columns: community.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CompaniesTable,
			Columns: community.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AreasTable,
			Columns: community.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAreasIDs(); len(nodes) > 0 && !cu.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AreasTable,
			Columns: community.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AreasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AreasTable,
			Columns: community.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   community.UsersTable,
			Columns: community.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   community.UsersTable,
			Columns: community.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   community.UsersTable,
			Columns: community.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommunityUpdateOne is the builder for updating a single Community entity.
type CommunityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunityMutation
}

// SetName sets the "name" field.
func (cuo *CommunityUpdateOne) SetName(s string) *CommunityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetAbout sets the "about" field.
func (cuo *CommunityUpdateOne) SetAbout(s string) *CommunityUpdateOne {
	cuo.mutation.SetAbout(s)
	return cuo
}

// SetMembers sets the "members" field.
func (cuo *CommunityUpdateOne) SetMembers(i int) *CommunityUpdateOne {
	cuo.mutation.ResetMembers()
	cuo.mutation.SetMembers(i)
	return cuo
}

// AddMembers adds i to the "members" field.
func (cuo *CommunityUpdateOne) AddMembers(i int) *CommunityUpdateOne {
	cuo.mutation.AddMembers(i)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CommunityUpdateOne) SetCreatedAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableCreatedAt(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// AddSocialIDs adds the "socials" edge to the Social entity by IDs.
func (cuo *CommunityUpdateOne) AddSocialIDs(ids ...int) *CommunityUpdateOne {
	cuo.mutation.AddSocialIDs(ids...)
	return cuo
}

// AddSocials adds the "socials" edges to the Social entity.
func (cuo *CommunityUpdateOne) AddSocials(s ...*Social) *CommunityUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSocialIDs(ids...)
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (cuo *CommunityUpdateOne) AddCompanyIDs(ids ...int) *CommunityUpdateOne {
	cuo.mutation.AddCompanyIDs(ids...)
	return cuo
}

// AddCompanies adds the "companies" edges to the Company entity.
func (cuo *CommunityUpdateOne) AddCompanies(c ...*Company) *CommunityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCompanyIDs(ids...)
}

// AddAreaIDs adds the "areas" edge to the Area entity by IDs.
func (cuo *CommunityUpdateOne) AddAreaIDs(ids ...int) *CommunityUpdateOne {
	cuo.mutation.AddAreaIDs(ids...)
	return cuo
}

// AddAreas adds the "areas" edges to the Area entity.
func (cuo *CommunityUpdateOne) AddAreas(a ...*Area) *CommunityUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAreaIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cuo *CommunityUpdateOne) AddUserIDs(ids ...int) *CommunityUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUsers adds the "users" edges to the User entity.
func (cuo *CommunityUpdateOne) AddUsers(u ...*User) *CommunityUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// Mutation returns the CommunityMutation object of the builder.
func (cuo *CommunityUpdateOne) Mutation() *CommunityMutation {
	return cuo.mutation
}

// ClearSocials clears all "socials" edges to the Social entity.
func (cuo *CommunityUpdateOne) ClearSocials() *CommunityUpdateOne {
	cuo.mutation.ClearSocials()
	return cuo
}

// RemoveSocialIDs removes the "socials" edge to Social entities by IDs.
func (cuo *CommunityUpdateOne) RemoveSocialIDs(ids ...int) *CommunityUpdateOne {
	cuo.mutation.RemoveSocialIDs(ids...)
	return cuo
}

// RemoveSocials removes "socials" edges to Social entities.
func (cuo *CommunityUpdateOne) RemoveSocials(s ...*Social) *CommunityUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSocialIDs(ids...)
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (cuo *CommunityUpdateOne) ClearCompanies() *CommunityUpdateOne {
	cuo.mutation.ClearCompanies()
	return cuo
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (cuo *CommunityUpdateOne) RemoveCompanyIDs(ids ...int) *CommunityUpdateOne {
	cuo.mutation.RemoveCompanyIDs(ids...)
	return cuo
}

// RemoveCompanies removes "companies" edges to Company entities.
func (cuo *CommunityUpdateOne) RemoveCompanies(c ...*Company) *CommunityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCompanyIDs(ids...)
}

// ClearAreas clears all "areas" edges to the Area entity.
func (cuo *CommunityUpdateOne) ClearAreas() *CommunityUpdateOne {
	cuo.mutation.ClearAreas()
	return cuo
}

// RemoveAreaIDs removes the "areas" edge to Area entities by IDs.
func (cuo *CommunityUpdateOne) RemoveAreaIDs(ids ...int) *CommunityUpdateOne {
	cuo.mutation.RemoveAreaIDs(ids...)
	return cuo
}

// RemoveAreas removes "areas" edges to Area entities.
func (cuo *CommunityUpdateOne) RemoveAreas(a ...*Area) *CommunityUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAreaIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cuo *CommunityUpdateOne) ClearUsers() *CommunityUpdateOne {
	cuo.mutation.ClearUsers()
	return cuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cuo *CommunityUpdateOne) RemoveUserIDs(ids ...int) *CommunityUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUsers removes "users" edges to User entities.
func (cuo *CommunityUpdateOne) RemoveUsers(u ...*User) *CommunityUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommunityUpdateOne) Select(field string, fields ...string) *CommunityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Community entity.
func (cuo *CommunityUpdateOne) Save(ctx context.Context) (*Community, error) {
	return withHooks[*Community, CommunityMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommunityUpdateOne) SaveX(ctx context.Context) *Community {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommunityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommunityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommunityUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := community.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Community.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.About(); ok {
		if err := community.AboutValidator(v); err != nil {
			return &ValidationError{Name: "about", err: fmt.Errorf(`ent: validator failed for field "Community.about": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Members(); ok {
		if err := community.MembersValidator(v); err != nil {
			return &ValidationError{Name: "members", err: fmt.Errorf(`ent: validator failed for field "Community.members": %w`, err)}
		}
	}
	return nil
}

func (cuo *CommunityUpdateOne) sqlSave(ctx context.Context) (_node *Community, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   community.Table,
			Columns: community.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: community.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Community.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, community.FieldID)
		for _, f := range fields {
			if !community.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != community.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(community.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.About(); ok {
		_spec.SetField(community.FieldAbout, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Members(); ok {
		_spec.SetField(community.FieldMembers, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMembers(); ok {
		_spec.AddField(community.FieldMembers, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(community.FieldCreatedAt, field.TypeTime, value)
	}
	if cuo.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.SocialsTable,
			Columns: community.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSocialsIDs(); len(nodes) > 0 && !cuo.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.SocialsTable,
			Columns: community.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SocialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.SocialsTable,
			Columns: community.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CompaniesTable,
			Columns: community.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !cuo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CompaniesTable,
			Columns: community.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CompaniesTable,
			Columns: community.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AreasTable,
			Columns: community.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAreasIDs(); len(nodes) > 0 && !cuo.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AreasTable,
			Columns: community.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AreasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AreasTable,
			Columns: community.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   community.UsersTable,
			Columns: community.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   community.UsersTable,
			Columns: community.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   community.UsersTable,
			Columns: community.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Community{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
