// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AreasColumns holds the columns for the "areas" table.
	AreasColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 15},
		{Name: "created_at", Type: field.TypeTime},
	}
	// AreasTable holds the schema information for the "areas" table.
	AreasTable = &schema.Table{
		Name:       "areas",
		Columns:    AreasColumns,
		PrimaryKey: []*schema.Column{AreasColumns[0]},
	}
	// LocationsColumns holds the columns for the "locations" table.
	LocationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 15},
		{Name: "created_at", Type: field.TypeTime},
	}
	// LocationsTable holds the schema information for the "locations" table.
	LocationsTable = &schema.Table{
		Name:       "locations",
		Columns:    LocationsColumns,
		PrimaryKey: []*schema.Column{LocationsColumns[0]},
	}
	// TechnologiesColumns holds the columns for the "technologies" table.
	TechnologiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 15},
		{Name: "created_at", Type: field.TypeTime},
	}
	// TechnologiesTable holds the schema information for the "technologies" table.
	TechnologiesTable = &schema.Table{
		Name:       "technologies",
		Columns:    TechnologiesColumns,
		PrimaryKey: []*schema.Column{TechnologiesColumns[0]},
	}
	// TechnologyLevelsColumns holds the columns for the "technology_levels" table.
	TechnologyLevelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "level", Type: field.TypeInt, Default: 1},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "technology_id", Type: field.TypeInt},
		{Name: "vacancy_id", Type: field.TypeInt},
	}
	// TechnologyLevelsTable holds the schema information for the "technology_levels" table.
	TechnologyLevelsTable = &schema.Table{
		Name:       "technology_levels",
		Columns:    TechnologyLevelsColumns,
		PrimaryKey: []*schema.Column{TechnologyLevelsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "technology_levels_technologies_technology",
				Columns:    []*schema.Column{TechnologyLevelsColumns[3]},
				RefColumns: []*schema.Column{TechnologiesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "technology_levels_vacancies_vacancy",
				Columns:    []*schema.Column{TechnologyLevelsColumns[4]},
				RefColumns: []*schema.Column{VacanciesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "technologylevel_technology_id_vacancy_id",
				Unique:  true,
				Columns: []*schema.Column{TechnologyLevelsColumns[3], TechnologyLevelsColumns[4]},
			},
		},
	}
	// VacanciesColumns holds the columns for the "vacancies" table.
	VacanciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 60},
		{Name: "description", Type: field.TypeString, Unique: true, Size: 2147483647},
		{Name: "is_negotiate", Type: field.TypeBool},
		{Name: "min_salary", Type: field.TypeInt},
		{Name: "max_salary", Type: field.TypeInt},
		{Name: "is_remote", Type: field.TypeBool},
		{Name: "views", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
	}
	// VacanciesTable holds the schema information for the "vacancies" table.
	VacanciesTable = &schema.Table{
		Name:       "vacancies",
		Columns:    VacanciesColumns,
		PrimaryKey: []*schema.Column{VacanciesColumns[0]},
	}
	// AreaVacanciesColumns holds the columns for the "area_vacancies" table.
	AreaVacanciesColumns = []*schema.Column{
		{Name: "area_id", Type: field.TypeInt},
		{Name: "vacancy_id", Type: field.TypeInt},
	}
	// AreaVacanciesTable holds the schema information for the "area_vacancies" table.
	AreaVacanciesTable = &schema.Table{
		Name:       "area_vacancies",
		Columns:    AreaVacanciesColumns,
		PrimaryKey: []*schema.Column{AreaVacanciesColumns[0], AreaVacanciesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "area_vacancies_area_id",
				Columns:    []*schema.Column{AreaVacanciesColumns[0]},
				RefColumns: []*schema.Column{AreasColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "area_vacancies_vacancy_id",
				Columns:    []*schema.Column{AreaVacanciesColumns[1]},
				RefColumns: []*schema.Column{VacanciesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// LocationVacanciesColumns holds the columns for the "location_vacancies" table.
	LocationVacanciesColumns = []*schema.Column{
		{Name: "location_id", Type: field.TypeInt},
		{Name: "vacancy_id", Type: field.TypeInt},
	}
	// LocationVacanciesTable holds the schema information for the "location_vacancies" table.
	LocationVacanciesTable = &schema.Table{
		Name:       "location_vacancies",
		Columns:    LocationVacanciesColumns,
		PrimaryKey: []*schema.Column{LocationVacanciesColumns[0], LocationVacanciesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "location_vacancies_location_id",
				Columns:    []*schema.Column{LocationVacanciesColumns[0]},
				RefColumns: []*schema.Column{LocationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "location_vacancies_vacancy_id",
				Columns:    []*schema.Column{LocationVacanciesColumns[1]},
				RefColumns: []*schema.Column{VacanciesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AreasTable,
		LocationsTable,
		TechnologiesTable,
		TechnologyLevelsTable,
		VacanciesTable,
		AreaVacanciesTable,
		LocationVacanciesTable,
	}
)

func init() {
	TechnologyLevelsTable.ForeignKeys[0].RefTable = TechnologiesTable
	TechnologyLevelsTable.ForeignKeys[1].RefTable = VacanciesTable
	AreaVacanciesTable.ForeignKeys[0].RefTable = AreasTable
	AreaVacanciesTable.ForeignKeys[1].RefTable = VacanciesTable
	LocationVacanciesTable.ForeignKeys[0].RefTable = LocationsTable
	LocationVacanciesTable.ForeignKeys[1].RefTable = VacanciesTable
}
