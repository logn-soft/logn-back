// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
	"github.com/logn-soft/logn-back/internal/ent/technology"
	"github.com/logn-soft/logn-back/internal/ent/technologylevel"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"
)

// TechnologyLevelQuery is the builder for querying TechnologyLevel entities.
type TechnologyLevelQuery struct {
	config
	ctx            *QueryContext
	order          []OrderFunc
	inters         []Interceptor
	predicates     []predicate.TechnologyLevel
	withTechnology *TechnologyQuery
	withVacancy    *VacancyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TechnologyLevelQuery builder.
func (tlq *TechnologyLevelQuery) Where(ps ...predicate.TechnologyLevel) *TechnologyLevelQuery {
	tlq.predicates = append(tlq.predicates, ps...)
	return tlq
}

// Limit the number of records to be returned by this query.
func (tlq *TechnologyLevelQuery) Limit(limit int) *TechnologyLevelQuery {
	tlq.ctx.Limit = &limit
	return tlq
}

// Offset to start from.
func (tlq *TechnologyLevelQuery) Offset(offset int) *TechnologyLevelQuery {
	tlq.ctx.Offset = &offset
	return tlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tlq *TechnologyLevelQuery) Unique(unique bool) *TechnologyLevelQuery {
	tlq.ctx.Unique = &unique
	return tlq
}

// Order specifies how the records should be ordered.
func (tlq *TechnologyLevelQuery) Order(o ...OrderFunc) *TechnologyLevelQuery {
	tlq.order = append(tlq.order, o...)
	return tlq
}

// QueryTechnology chains the current query on the "technology" edge.
func (tlq *TechnologyLevelQuery) QueryTechnology() *TechnologyQuery {
	query := (&TechnologyClient{config: tlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(technologylevel.Table, technologylevel.FieldID, selector),
			sqlgraph.To(technology.Table, technology.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, technologylevel.TechnologyTable, technologylevel.TechnologyColumn),
		)
		fromU = sqlgraph.SetNeighbors(tlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVacancy chains the current query on the "vacancy" edge.
func (tlq *TechnologyLevelQuery) QueryVacancy() *VacancyQuery {
	query := (&VacancyClient{config: tlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(technologylevel.Table, technologylevel.FieldID, selector),
			sqlgraph.To(vacancy.Table, vacancy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, technologylevel.VacancyTable, technologylevel.VacancyColumn),
		)
		fromU = sqlgraph.SetNeighbors(tlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TechnologyLevel entity from the query.
// Returns a *NotFoundError when no TechnologyLevel was found.
func (tlq *TechnologyLevelQuery) First(ctx context.Context) (*TechnologyLevel, error) {
	nodes, err := tlq.Limit(1).All(setContextOp(ctx, tlq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{technologylevel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tlq *TechnologyLevelQuery) FirstX(ctx context.Context) *TechnologyLevel {
	node, err := tlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TechnologyLevel ID from the query.
// Returns a *NotFoundError when no TechnologyLevel ID was found.
func (tlq *TechnologyLevelQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tlq.Limit(1).IDs(setContextOp(ctx, tlq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{technologylevel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tlq *TechnologyLevelQuery) FirstIDX(ctx context.Context) int {
	id, err := tlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TechnologyLevel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TechnologyLevel entity is found.
// Returns a *NotFoundError when no TechnologyLevel entities are found.
func (tlq *TechnologyLevelQuery) Only(ctx context.Context) (*TechnologyLevel, error) {
	nodes, err := tlq.Limit(2).All(setContextOp(ctx, tlq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{technologylevel.Label}
	default:
		return nil, &NotSingularError{technologylevel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tlq *TechnologyLevelQuery) OnlyX(ctx context.Context) *TechnologyLevel {
	node, err := tlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TechnologyLevel ID in the query.
// Returns a *NotSingularError when more than one TechnologyLevel ID is found.
// Returns a *NotFoundError when no entities are found.
func (tlq *TechnologyLevelQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tlq.Limit(2).IDs(setContextOp(ctx, tlq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{technologylevel.Label}
	default:
		err = &NotSingularError{technologylevel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tlq *TechnologyLevelQuery) OnlyIDX(ctx context.Context) int {
	id, err := tlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TechnologyLevels.
func (tlq *TechnologyLevelQuery) All(ctx context.Context) ([]*TechnologyLevel, error) {
	ctx = setContextOp(ctx, tlq.ctx, "All")
	if err := tlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TechnologyLevel, *TechnologyLevelQuery]()
	return withInterceptors[[]*TechnologyLevel](ctx, tlq, qr, tlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tlq *TechnologyLevelQuery) AllX(ctx context.Context) []*TechnologyLevel {
	nodes, err := tlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TechnologyLevel IDs.
func (tlq *TechnologyLevelQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, tlq.ctx, "IDs")
	if err := tlq.Select(technologylevel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tlq *TechnologyLevelQuery) IDsX(ctx context.Context) []int {
	ids, err := tlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tlq *TechnologyLevelQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tlq.ctx, "Count")
	if err := tlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tlq, querierCount[*TechnologyLevelQuery](), tlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tlq *TechnologyLevelQuery) CountX(ctx context.Context) int {
	count, err := tlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tlq *TechnologyLevelQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tlq.ctx, "Exist")
	switch _, err := tlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tlq *TechnologyLevelQuery) ExistX(ctx context.Context) bool {
	exist, err := tlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TechnologyLevelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tlq *TechnologyLevelQuery) Clone() *TechnologyLevelQuery {
	if tlq == nil {
		return nil
	}
	return &TechnologyLevelQuery{
		config:         tlq.config,
		ctx:            tlq.ctx.Clone(),
		order:          append([]OrderFunc{}, tlq.order...),
		inters:         append([]Interceptor{}, tlq.inters...),
		predicates:     append([]predicate.TechnologyLevel{}, tlq.predicates...),
		withTechnology: tlq.withTechnology.Clone(),
		withVacancy:    tlq.withVacancy.Clone(),
		// clone intermediate query.
		sql:  tlq.sql.Clone(),
		path: tlq.path,
	}
}

// WithTechnology tells the query-builder to eager-load the nodes that are connected to
// the "technology" edge. The optional arguments are used to configure the query builder of the edge.
func (tlq *TechnologyLevelQuery) WithTechnology(opts ...func(*TechnologyQuery)) *TechnologyLevelQuery {
	query := (&TechnologyClient{config: tlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tlq.withTechnology = query
	return tlq
}

// WithVacancy tells the query-builder to eager-load the nodes that are connected to
// the "vacancy" edge. The optional arguments are used to configure the query builder of the edge.
func (tlq *TechnologyLevelQuery) WithVacancy(opts ...func(*VacancyQuery)) *TechnologyLevelQuery {
	query := (&VacancyClient{config: tlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tlq.withVacancy = query
	return tlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Level int `json:"level,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TechnologyLevel.Query().
//		GroupBy(technologylevel.FieldLevel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tlq *TechnologyLevelQuery) GroupBy(field string, fields ...string) *TechnologyLevelGroupBy {
	tlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TechnologyLevelGroupBy{build: tlq}
	grbuild.flds = &tlq.ctx.Fields
	grbuild.label = technologylevel.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Level int `json:"level,omitempty"`
//	}
//
//	client.TechnologyLevel.Query().
//		Select(technologylevel.FieldLevel).
//		Scan(ctx, &v)
func (tlq *TechnologyLevelQuery) Select(fields ...string) *TechnologyLevelSelect {
	tlq.ctx.Fields = append(tlq.ctx.Fields, fields...)
	sbuild := &TechnologyLevelSelect{TechnologyLevelQuery: tlq}
	sbuild.label = technologylevel.Label
	sbuild.flds, sbuild.scan = &tlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TechnologyLevelSelect configured with the given aggregations.
func (tlq *TechnologyLevelQuery) Aggregate(fns ...AggregateFunc) *TechnologyLevelSelect {
	return tlq.Select().Aggregate(fns...)
}

func (tlq *TechnologyLevelQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tlq); err != nil {
				return err
			}
		}
	}
	for _, f := range tlq.ctx.Fields {
		if !technologylevel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tlq.path != nil {
		prev, err := tlq.path(ctx)
		if err != nil {
			return err
		}
		tlq.sql = prev
	}
	return nil
}

func (tlq *TechnologyLevelQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TechnologyLevel, error) {
	var (
		nodes       = []*TechnologyLevel{}
		_spec       = tlq.querySpec()
		loadedTypes = [2]bool{
			tlq.withTechnology != nil,
			tlq.withVacancy != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TechnologyLevel).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TechnologyLevel{config: tlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tlq.withTechnology; query != nil {
		if err := tlq.loadTechnology(ctx, query, nodes, nil,
			func(n *TechnologyLevel, e *Technology) { n.Edges.Technology = e }); err != nil {
			return nil, err
		}
	}
	if query := tlq.withVacancy; query != nil {
		if err := tlq.loadVacancy(ctx, query, nodes, nil,
			func(n *TechnologyLevel, e *Vacancy) { n.Edges.Vacancy = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tlq *TechnologyLevelQuery) loadTechnology(ctx context.Context, query *TechnologyQuery, nodes []*TechnologyLevel, init func(*TechnologyLevel), assign func(*TechnologyLevel, *Technology)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TechnologyLevel)
	for i := range nodes {
		fk := nodes[i].TechnologyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(technology.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "technology_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tlq *TechnologyLevelQuery) loadVacancy(ctx context.Context, query *VacancyQuery, nodes []*TechnologyLevel, init func(*TechnologyLevel), assign func(*TechnologyLevel, *Vacancy)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TechnologyLevel)
	for i := range nodes {
		fk := nodes[i].VacancyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(vacancy.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "vacancy_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tlq *TechnologyLevelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tlq.querySpec()
	_spec.Node.Columns = tlq.ctx.Fields
	if len(tlq.ctx.Fields) > 0 {
		_spec.Unique = tlq.ctx.Unique != nil && *tlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tlq.driver, _spec)
}

func (tlq *TechnologyLevelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   technologylevel.Table,
			Columns: technologylevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technologylevel.FieldID,
			},
		},
		From:   tlq.sql,
		Unique: true,
	}
	if unique := tlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, technologylevel.FieldID)
		for i := range fields {
			if fields[i] != technologylevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tlq *TechnologyLevelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tlq.driver.Dialect())
	t1 := builder.Table(technologylevel.Table)
	columns := tlq.ctx.Fields
	if len(columns) == 0 {
		columns = technologylevel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tlq.sql != nil {
		selector = tlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tlq.ctx.Unique != nil && *tlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tlq.predicates {
		p(selector)
	}
	for _, p := range tlq.order {
		p(selector)
	}
	if offset := tlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TechnologyLevelGroupBy is the group-by builder for TechnologyLevel entities.
type TechnologyLevelGroupBy struct {
	selector
	build *TechnologyLevelQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tlgb *TechnologyLevelGroupBy) Aggregate(fns ...AggregateFunc) *TechnologyLevelGroupBy {
	tlgb.fns = append(tlgb.fns, fns...)
	return tlgb
}

// Scan applies the selector query and scans the result into the given value.
func (tlgb *TechnologyLevelGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tlgb.build.ctx, "GroupBy")
	if err := tlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TechnologyLevelQuery, *TechnologyLevelGroupBy](ctx, tlgb.build, tlgb, tlgb.build.inters, v)
}

func (tlgb *TechnologyLevelGroupBy) sqlScan(ctx context.Context, root *TechnologyLevelQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tlgb.fns))
	for _, fn := range tlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tlgb.flds)+len(tlgb.fns))
		for _, f := range *tlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TechnologyLevelSelect is the builder for selecting fields of TechnologyLevel entities.
type TechnologyLevelSelect struct {
	*TechnologyLevelQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tls *TechnologyLevelSelect) Aggregate(fns ...AggregateFunc) *TechnologyLevelSelect {
	tls.fns = append(tls.fns, fns...)
	return tls
}

// Scan applies the selector query and scans the result into the given value.
func (tls *TechnologyLevelSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tls.ctx, "Select")
	if err := tls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TechnologyLevelQuery, *TechnologyLevelSelect](ctx, tls.TechnologyLevelQuery, tls, tls.inters, v)
}

func (tls *TechnologyLevelSelect) sqlScan(ctx context.Context, root *TechnologyLevelQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tls.fns))
	for _, fn := range tls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
