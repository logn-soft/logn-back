// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/technology"
	"github.com/logn-soft/logn-back/internal/ent/technologylevel"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"
)

// TechnologyCreate is the builder for creating a Technology entity.
type TechnologyCreate struct {
	config
	mutation *TechnologyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *TechnologyCreate) SetName(s string) *TechnologyCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TechnologyCreate) SetCreatedAt(t time.Time) *TechnologyCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TechnologyCreate) SetNillableCreatedAt(t *time.Time) *TechnologyCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// AddVacancyIDs adds the "vacancies" edge to the Vacancy entity by IDs.
func (tc *TechnologyCreate) AddVacancyIDs(ids ...int) *TechnologyCreate {
	tc.mutation.AddVacancyIDs(ids...)
	return tc
}

// AddVacancies adds the "vacancies" edges to the Vacancy entity.
func (tc *TechnologyCreate) AddVacancies(v ...*Vacancy) *TechnologyCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return tc.AddVacancyIDs(ids...)
}

// AddTechnologyLevelIDs adds the "technology_levels" edge to the TechnologyLevel entity by IDs.
func (tc *TechnologyCreate) AddTechnologyLevelIDs(ids ...int) *TechnologyCreate {
	tc.mutation.AddTechnologyLevelIDs(ids...)
	return tc
}

// AddTechnologyLevels adds the "technology_levels" edges to the TechnologyLevel entity.
func (tc *TechnologyCreate) AddTechnologyLevels(t ...*TechnologyLevel) *TechnologyCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTechnologyLevelIDs(ids...)
}

// Mutation returns the TechnologyMutation object of the builder.
func (tc *TechnologyCreate) Mutation() *TechnologyMutation {
	return tc.mutation
}

// Save creates the Technology in the database.
func (tc *TechnologyCreate) Save(ctx context.Context) (*Technology, error) {
	tc.defaults()
	return withHooks[*Technology, TechnologyMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TechnologyCreate) SaveX(ctx context.Context) *Technology {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TechnologyCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TechnologyCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TechnologyCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := technology.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TechnologyCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Technology.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := technology.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Technology.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Technology.created_at"`)}
	}
	return nil
}

func (tc *TechnologyCreate) sqlSave(ctx context.Context) (*Technology, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TechnologyCreate) createSpec() (*Technology, *sqlgraph.CreateSpec) {
	var (
		_node = &Technology{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: technology.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technology.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(technology.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(technology.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tc.mutation.VacanciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technology.VacanciesTable,
			Columns: technology.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TechnologyLevelCreate{config: tc.config, mutation: newTechnologyLevelMutation(tc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TechnologyLevelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   technology.TechnologyLevelsTable,
			Columns: []string{technology.TechnologyLevelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologylevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TechnologyCreateBulk is the builder for creating many Technology entities in bulk.
type TechnologyCreateBulk struct {
	config
	builders []*TechnologyCreate
}

// Save creates the Technology entities in the database.
func (tcb *TechnologyCreateBulk) Save(ctx context.Context) ([]*Technology, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Technology, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TechnologyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TechnologyCreateBulk) SaveX(ctx context.Context) []*Technology {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TechnologyCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TechnologyCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
