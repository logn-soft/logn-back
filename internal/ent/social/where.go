// Code generated by ent, DO NOT EDIT.

package social

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Social {
	return predicate.Social(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Social {
	return predicate.Social(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Social {
	return predicate.Social(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Social {
	return predicate.Social(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Social {
	return predicate.Social(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Social {
	return predicate.Social(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Social {
	return predicate.Social(sql.FieldLTE(FieldID, id))
}

// Fb applies equality check predicate on the "fb" field. It's identical to FbEQ.
func Fb(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldFb, v))
}

// Twitter applies equality check predicate on the "twitter" field. It's identical to TwitterEQ.
func Twitter(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldTwitter, v))
}

// Discord applies equality check predicate on the "discord" field. It's identical to DiscordEQ.
func Discord(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldDiscord, v))
}

// Slack applies equality check predicate on the "slack" field. It's identical to SlackEQ.
func Slack(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldSlack, v))
}

// Other applies equality check predicate on the "other" field. It's identical to OtherEQ.
func Other(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldOther, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldCreatedAt, v))
}

// FbEQ applies the EQ predicate on the "fb" field.
func FbEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldFb, v))
}

// FbNEQ applies the NEQ predicate on the "fb" field.
func FbNEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldNEQ(FieldFb, v))
}

// FbIn applies the In predicate on the "fb" field.
func FbIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldIn(FieldFb, vs...))
}

// FbNotIn applies the NotIn predicate on the "fb" field.
func FbNotIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldNotIn(FieldFb, vs...))
}

// FbGT applies the GT predicate on the "fb" field.
func FbGT(v string) predicate.Social {
	return predicate.Social(sql.FieldGT(FieldFb, v))
}

// FbGTE applies the GTE predicate on the "fb" field.
func FbGTE(v string) predicate.Social {
	return predicate.Social(sql.FieldGTE(FieldFb, v))
}

// FbLT applies the LT predicate on the "fb" field.
func FbLT(v string) predicate.Social {
	return predicate.Social(sql.FieldLT(FieldFb, v))
}

// FbLTE applies the LTE predicate on the "fb" field.
func FbLTE(v string) predicate.Social {
	return predicate.Social(sql.FieldLTE(FieldFb, v))
}

// FbContains applies the Contains predicate on the "fb" field.
func FbContains(v string) predicate.Social {
	return predicate.Social(sql.FieldContains(FieldFb, v))
}

// FbHasPrefix applies the HasPrefix predicate on the "fb" field.
func FbHasPrefix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasPrefix(FieldFb, v))
}

// FbHasSuffix applies the HasSuffix predicate on the "fb" field.
func FbHasSuffix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasSuffix(FieldFb, v))
}

// FbIsNil applies the IsNil predicate on the "fb" field.
func FbIsNil() predicate.Social {
	return predicate.Social(sql.FieldIsNull(FieldFb))
}

// FbNotNil applies the NotNil predicate on the "fb" field.
func FbNotNil() predicate.Social {
	return predicate.Social(sql.FieldNotNull(FieldFb))
}

// FbEqualFold applies the EqualFold predicate on the "fb" field.
func FbEqualFold(v string) predicate.Social {
	return predicate.Social(sql.FieldEqualFold(FieldFb, v))
}

// FbContainsFold applies the ContainsFold predicate on the "fb" field.
func FbContainsFold(v string) predicate.Social {
	return predicate.Social(sql.FieldContainsFold(FieldFb, v))
}

// TwitterEQ applies the EQ predicate on the "twitter" field.
func TwitterEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldTwitter, v))
}

// TwitterNEQ applies the NEQ predicate on the "twitter" field.
func TwitterNEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldNEQ(FieldTwitter, v))
}

// TwitterIn applies the In predicate on the "twitter" field.
func TwitterIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldIn(FieldTwitter, vs...))
}

// TwitterNotIn applies the NotIn predicate on the "twitter" field.
func TwitterNotIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldNotIn(FieldTwitter, vs...))
}

// TwitterGT applies the GT predicate on the "twitter" field.
func TwitterGT(v string) predicate.Social {
	return predicate.Social(sql.FieldGT(FieldTwitter, v))
}

// TwitterGTE applies the GTE predicate on the "twitter" field.
func TwitterGTE(v string) predicate.Social {
	return predicate.Social(sql.FieldGTE(FieldTwitter, v))
}

// TwitterLT applies the LT predicate on the "twitter" field.
func TwitterLT(v string) predicate.Social {
	return predicate.Social(sql.FieldLT(FieldTwitter, v))
}

// TwitterLTE applies the LTE predicate on the "twitter" field.
func TwitterLTE(v string) predicate.Social {
	return predicate.Social(sql.FieldLTE(FieldTwitter, v))
}

// TwitterContains applies the Contains predicate on the "twitter" field.
func TwitterContains(v string) predicate.Social {
	return predicate.Social(sql.FieldContains(FieldTwitter, v))
}

// TwitterHasPrefix applies the HasPrefix predicate on the "twitter" field.
func TwitterHasPrefix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasPrefix(FieldTwitter, v))
}

// TwitterHasSuffix applies the HasSuffix predicate on the "twitter" field.
func TwitterHasSuffix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasSuffix(FieldTwitter, v))
}

// TwitterIsNil applies the IsNil predicate on the "twitter" field.
func TwitterIsNil() predicate.Social {
	return predicate.Social(sql.FieldIsNull(FieldTwitter))
}

// TwitterNotNil applies the NotNil predicate on the "twitter" field.
func TwitterNotNil() predicate.Social {
	return predicate.Social(sql.FieldNotNull(FieldTwitter))
}

// TwitterEqualFold applies the EqualFold predicate on the "twitter" field.
func TwitterEqualFold(v string) predicate.Social {
	return predicate.Social(sql.FieldEqualFold(FieldTwitter, v))
}

// TwitterContainsFold applies the ContainsFold predicate on the "twitter" field.
func TwitterContainsFold(v string) predicate.Social {
	return predicate.Social(sql.FieldContainsFold(FieldTwitter, v))
}

// DiscordEQ applies the EQ predicate on the "discord" field.
func DiscordEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldDiscord, v))
}

// DiscordNEQ applies the NEQ predicate on the "discord" field.
func DiscordNEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldNEQ(FieldDiscord, v))
}

// DiscordIn applies the In predicate on the "discord" field.
func DiscordIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldIn(FieldDiscord, vs...))
}

// DiscordNotIn applies the NotIn predicate on the "discord" field.
func DiscordNotIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldNotIn(FieldDiscord, vs...))
}

// DiscordGT applies the GT predicate on the "discord" field.
func DiscordGT(v string) predicate.Social {
	return predicate.Social(sql.FieldGT(FieldDiscord, v))
}

// DiscordGTE applies the GTE predicate on the "discord" field.
func DiscordGTE(v string) predicate.Social {
	return predicate.Social(sql.FieldGTE(FieldDiscord, v))
}

// DiscordLT applies the LT predicate on the "discord" field.
func DiscordLT(v string) predicate.Social {
	return predicate.Social(sql.FieldLT(FieldDiscord, v))
}

// DiscordLTE applies the LTE predicate on the "discord" field.
func DiscordLTE(v string) predicate.Social {
	return predicate.Social(sql.FieldLTE(FieldDiscord, v))
}

// DiscordContains applies the Contains predicate on the "discord" field.
func DiscordContains(v string) predicate.Social {
	return predicate.Social(sql.FieldContains(FieldDiscord, v))
}

// DiscordHasPrefix applies the HasPrefix predicate on the "discord" field.
func DiscordHasPrefix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasPrefix(FieldDiscord, v))
}

// DiscordHasSuffix applies the HasSuffix predicate on the "discord" field.
func DiscordHasSuffix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasSuffix(FieldDiscord, v))
}

// DiscordIsNil applies the IsNil predicate on the "discord" field.
func DiscordIsNil() predicate.Social {
	return predicate.Social(sql.FieldIsNull(FieldDiscord))
}

// DiscordNotNil applies the NotNil predicate on the "discord" field.
func DiscordNotNil() predicate.Social {
	return predicate.Social(sql.FieldNotNull(FieldDiscord))
}

// DiscordEqualFold applies the EqualFold predicate on the "discord" field.
func DiscordEqualFold(v string) predicate.Social {
	return predicate.Social(sql.FieldEqualFold(FieldDiscord, v))
}

// DiscordContainsFold applies the ContainsFold predicate on the "discord" field.
func DiscordContainsFold(v string) predicate.Social {
	return predicate.Social(sql.FieldContainsFold(FieldDiscord, v))
}

// SlackEQ applies the EQ predicate on the "slack" field.
func SlackEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldSlack, v))
}

// SlackNEQ applies the NEQ predicate on the "slack" field.
func SlackNEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldNEQ(FieldSlack, v))
}

// SlackIn applies the In predicate on the "slack" field.
func SlackIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldIn(FieldSlack, vs...))
}

// SlackNotIn applies the NotIn predicate on the "slack" field.
func SlackNotIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldNotIn(FieldSlack, vs...))
}

// SlackGT applies the GT predicate on the "slack" field.
func SlackGT(v string) predicate.Social {
	return predicate.Social(sql.FieldGT(FieldSlack, v))
}

// SlackGTE applies the GTE predicate on the "slack" field.
func SlackGTE(v string) predicate.Social {
	return predicate.Social(sql.FieldGTE(FieldSlack, v))
}

// SlackLT applies the LT predicate on the "slack" field.
func SlackLT(v string) predicate.Social {
	return predicate.Social(sql.FieldLT(FieldSlack, v))
}

// SlackLTE applies the LTE predicate on the "slack" field.
func SlackLTE(v string) predicate.Social {
	return predicate.Social(sql.FieldLTE(FieldSlack, v))
}

// SlackContains applies the Contains predicate on the "slack" field.
func SlackContains(v string) predicate.Social {
	return predicate.Social(sql.FieldContains(FieldSlack, v))
}

// SlackHasPrefix applies the HasPrefix predicate on the "slack" field.
func SlackHasPrefix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasPrefix(FieldSlack, v))
}

// SlackHasSuffix applies the HasSuffix predicate on the "slack" field.
func SlackHasSuffix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasSuffix(FieldSlack, v))
}

// SlackIsNil applies the IsNil predicate on the "slack" field.
func SlackIsNil() predicate.Social {
	return predicate.Social(sql.FieldIsNull(FieldSlack))
}

// SlackNotNil applies the NotNil predicate on the "slack" field.
func SlackNotNil() predicate.Social {
	return predicate.Social(sql.FieldNotNull(FieldSlack))
}

// SlackEqualFold applies the EqualFold predicate on the "slack" field.
func SlackEqualFold(v string) predicate.Social {
	return predicate.Social(sql.FieldEqualFold(FieldSlack, v))
}

// SlackContainsFold applies the ContainsFold predicate on the "slack" field.
func SlackContainsFold(v string) predicate.Social {
	return predicate.Social(sql.FieldContainsFold(FieldSlack, v))
}

// OtherEQ applies the EQ predicate on the "other" field.
func OtherEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldOther, v))
}

// OtherNEQ applies the NEQ predicate on the "other" field.
func OtherNEQ(v string) predicate.Social {
	return predicate.Social(sql.FieldNEQ(FieldOther, v))
}

// OtherIn applies the In predicate on the "other" field.
func OtherIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldIn(FieldOther, vs...))
}

// OtherNotIn applies the NotIn predicate on the "other" field.
func OtherNotIn(vs ...string) predicate.Social {
	return predicate.Social(sql.FieldNotIn(FieldOther, vs...))
}

// OtherGT applies the GT predicate on the "other" field.
func OtherGT(v string) predicate.Social {
	return predicate.Social(sql.FieldGT(FieldOther, v))
}

// OtherGTE applies the GTE predicate on the "other" field.
func OtherGTE(v string) predicate.Social {
	return predicate.Social(sql.FieldGTE(FieldOther, v))
}

// OtherLT applies the LT predicate on the "other" field.
func OtherLT(v string) predicate.Social {
	return predicate.Social(sql.FieldLT(FieldOther, v))
}

// OtherLTE applies the LTE predicate on the "other" field.
func OtherLTE(v string) predicate.Social {
	return predicate.Social(sql.FieldLTE(FieldOther, v))
}

// OtherContains applies the Contains predicate on the "other" field.
func OtherContains(v string) predicate.Social {
	return predicate.Social(sql.FieldContains(FieldOther, v))
}

// OtherHasPrefix applies the HasPrefix predicate on the "other" field.
func OtherHasPrefix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasPrefix(FieldOther, v))
}

// OtherHasSuffix applies the HasSuffix predicate on the "other" field.
func OtherHasSuffix(v string) predicate.Social {
	return predicate.Social(sql.FieldHasSuffix(FieldOther, v))
}

// OtherIsNil applies the IsNil predicate on the "other" field.
func OtherIsNil() predicate.Social {
	return predicate.Social(sql.FieldIsNull(FieldOther))
}

// OtherNotNil applies the NotNil predicate on the "other" field.
func OtherNotNil() predicate.Social {
	return predicate.Social(sql.FieldNotNull(FieldOther))
}

// OtherEqualFold applies the EqualFold predicate on the "other" field.
func OtherEqualFold(v string) predicate.Social {
	return predicate.Social(sql.FieldEqualFold(FieldOther, v))
}

// OtherContainsFold applies the ContainsFold predicate on the "other" field.
func OtherContainsFold(v string) predicate.Social {
	return predicate.Social(sql.FieldContainsFold(FieldOther, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Social {
	return predicate.Social(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Social {
	return predicate.Social(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Social {
	return predicate.Social(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Social {
	return predicate.Social(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Social {
	return predicate.Social(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Social {
	return predicate.Social(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Social {
	return predicate.Social(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Social {
	return predicate.Social(sql.FieldLTE(FieldCreatedAt, v))
}

// HasCompanies applies the HasEdge predicate on the "companies" edge.
func HasCompanies() predicate.Social {
	return predicate.Social(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CompaniesTable, CompaniesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompaniesWith applies the HasEdge predicate on the "companies" edge with a given conditions (other predicates).
func HasCompaniesWith(preds ...predicate.Company) predicate.Social {
	return predicate.Social(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompaniesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CompaniesTable, CompaniesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommunities applies the HasEdge predicate on the "communities" edge.
func HasCommunities() predicate.Social {
	return predicate.Social(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CommunitiesTable, CommunitiesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommunitiesWith applies the HasEdge predicate on the "communities" edge with a given conditions (other predicates).
func HasCommunitiesWith(preds ...predicate.Community) predicate.Social {
	return predicate.Social(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommunitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CommunitiesTable, CommunitiesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Social) predicate.Social {
	return predicate.Social(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Social) predicate.Social {
	return predicate.Social(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Social) predicate.Social {
	return predicate.Social(func(s *sql.Selector) {
		p(s.Not())
	})
}
