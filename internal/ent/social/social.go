// Code generated by ent, DO NOT EDIT.

package social

import (
	"time"
)

const (
	// Label holds the string label denoting the social type in the database.
	Label = "social"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFb holds the string denoting the fb field in the database.
	FieldFb = "fb"
	// FieldTwitter holds the string denoting the twitter field in the database.
	FieldTwitter = "twitter"
	// FieldDiscord holds the string denoting the discord field in the database.
	FieldDiscord = "discord"
	// FieldSlack holds the string denoting the slack field in the database.
	FieldSlack = "slack"
	// FieldOther holds the string denoting the other field in the database.
	FieldOther = "other"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCompanies holds the string denoting the companies edge name in mutations.
	EdgeCompanies = "companies"
	// EdgeCommunities holds the string denoting the communities edge name in mutations.
	EdgeCommunities = "communities"
	// Table holds the table name of the social in the database.
	Table = "socials"
	// CompaniesTable is the table that holds the companies relation/edge. The primary key declared below.
	CompaniesTable = "social_companies"
	// CompaniesInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompaniesInverseTable = "companies"
	// CommunitiesTable is the table that holds the communities relation/edge. The primary key declared below.
	CommunitiesTable = "social_communities"
	// CommunitiesInverseTable is the table name for the Community entity.
	// It exists in this package in order to avoid circular dependency with the "community" package.
	CommunitiesInverseTable = "communities"
)

// Columns holds all SQL columns for social fields.
var Columns = []string{
	FieldID,
	FieldFb,
	FieldTwitter,
	FieldDiscord,
	FieldSlack,
	FieldOther,
	FieldCreatedAt,
}

var (
	// CompaniesPrimaryKey and CompaniesColumn2 are the table columns denoting the
	// primary key for the companies relation (M2M).
	CompaniesPrimaryKey = []string{"social_id", "company_id"}
	// CommunitiesPrimaryKey and CommunitiesColumn2 are the table columns denoting the
	// primary key for the communities relation (M2M).
	CommunitiesPrimaryKey = []string{"social_id", "community_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FbValidator is a validator for the "fb" field. It is called by the builders before save.
	FbValidator func(string) error
	// TwitterValidator is a validator for the "twitter" field. It is called by the builders before save.
	TwitterValidator func(string) error
	// DiscordValidator is a validator for the "discord" field. It is called by the builders before save.
	DiscordValidator func(string) error
	// SlackValidator is a validator for the "slack" field. It is called by the builders before save.
	SlackValidator func(string) error
	// OtherValidator is a validator for the "other" field. It is called by the builders before save.
	OtherValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
