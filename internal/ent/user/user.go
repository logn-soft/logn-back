// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldBirthDay holds the string denoting the birth_day field in the database.
	FieldBirthDay = "birth_day"
	// FieldBirthMonth holds the string denoting the birth_month field in the database.
	FieldBirthMonth = "birth_month"
	// FieldBirthYear holds the string denoting the birth_year field in the database.
	FieldBirthYear = "birth_year"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePasswords holds the string denoting the passwords edge name in mutations.
	EdgePasswords = "passwords"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeCommunities holds the string denoting the communities edge name in mutations.
	EdgeCommunities = "communities"
	// EdgeCompanies holds the string denoting the companies edge name in mutations.
	EdgeCompanies = "companies"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PasswordsTable is the table that holds the passwords relation/edge. The primary key declared below.
	PasswordsTable = "password_users"
	// PasswordsInverseTable is the table name for the Password entity.
	// It exists in this package in order to avoid circular dependency with the "password" package.
	PasswordsInverseTable = "passwords"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "role_users"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// CommunitiesTable is the table that holds the communities relation/edge. The primary key declared below.
	CommunitiesTable = "community_users"
	// CommunitiesInverseTable is the table name for the Community entity.
	// It exists in this package in order to avoid circular dependency with the "community" package.
	CommunitiesInverseTable = "communities"
	// CompaniesTable is the table that holds the companies relation/edge. The primary key declared below.
	CompaniesTable = "company_users"
	// CompaniesInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompaniesInverseTable = "companies"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSurname,
	FieldEmail,
	FieldBirthDay,
	FieldBirthMonth,
	FieldBirthYear,
	FieldCreatedAt,
}

var (
	// PasswordsPrimaryKey and PasswordsColumn2 are the table columns denoting the
	// primary key for the passwords relation (M2M).
	PasswordsPrimaryKey = []string{"password_id", "user_id"}
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"role_id", "user_id"}
	// CommunitiesPrimaryKey and CommunitiesColumn2 are the table columns denoting the
	// primary key for the communities relation (M2M).
	CommunitiesPrimaryKey = []string{"community_id", "user_id"}
	// CompaniesPrimaryKey and CompaniesColumn2 are the table columns denoting the
	// primary key for the companies relation (M2M).
	CompaniesPrimaryKey = []string{"company_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	SurnameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// BirthDayValidator is a validator for the "birth_day" field. It is called by the builders before save.
	BirthDayValidator func(int) error
	// BirthMonthValidator is a validator for the "birth_month" field. It is called by the builders before save.
	BirthMonthValidator func(int) error
	// BirthYearValidator is a validator for the "birth_year" field. It is called by the builders before save.
	BirthYearValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
