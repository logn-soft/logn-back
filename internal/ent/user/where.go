// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Surname applies equality check predicate on the "surname" field. It's identical to SurnameEQ.
func Surname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSurname, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// BirthDay applies equality check predicate on the "birth_day" field. It's identical to BirthDayEQ.
func BirthDay(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthDay, v))
}

// BirthMonth applies equality check predicate on the "birth_month" field. It's identical to BirthMonthEQ.
func BirthMonth(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthMonth, v))
}

// BirthYear applies equality check predicate on the "birth_year" field. It's identical to BirthYearEQ.
func BirthYear(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthYear, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// SurnameEQ applies the EQ predicate on the "surname" field.
func SurnameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSurname, v))
}

// SurnameNEQ applies the NEQ predicate on the "surname" field.
func SurnameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSurname, v))
}

// SurnameIn applies the In predicate on the "surname" field.
func SurnameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSurname, vs...))
}

// SurnameNotIn applies the NotIn predicate on the "surname" field.
func SurnameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSurname, vs...))
}

// SurnameGT applies the GT predicate on the "surname" field.
func SurnameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSurname, v))
}

// SurnameGTE applies the GTE predicate on the "surname" field.
func SurnameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSurname, v))
}

// SurnameLT applies the LT predicate on the "surname" field.
func SurnameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSurname, v))
}

// SurnameLTE applies the LTE predicate on the "surname" field.
func SurnameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSurname, v))
}

// SurnameContains applies the Contains predicate on the "surname" field.
func SurnameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSurname, v))
}

// SurnameHasPrefix applies the HasPrefix predicate on the "surname" field.
func SurnameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSurname, v))
}

// SurnameHasSuffix applies the HasSuffix predicate on the "surname" field.
func SurnameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSurname, v))
}

// SurnameEqualFold applies the EqualFold predicate on the "surname" field.
func SurnameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSurname, v))
}

// SurnameContainsFold applies the ContainsFold predicate on the "surname" field.
func SurnameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSurname, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// BirthDayEQ applies the EQ predicate on the "birth_day" field.
func BirthDayEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthDay, v))
}

// BirthDayNEQ applies the NEQ predicate on the "birth_day" field.
func BirthDayNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthDay, v))
}

// BirthDayIn applies the In predicate on the "birth_day" field.
func BirthDayIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthDay, vs...))
}

// BirthDayNotIn applies the NotIn predicate on the "birth_day" field.
func BirthDayNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthDay, vs...))
}

// BirthDayGT applies the GT predicate on the "birth_day" field.
func BirthDayGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthDay, v))
}

// BirthDayGTE applies the GTE predicate on the "birth_day" field.
func BirthDayGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthDay, v))
}

// BirthDayLT applies the LT predicate on the "birth_day" field.
func BirthDayLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthDay, v))
}

// BirthDayLTE applies the LTE predicate on the "birth_day" field.
func BirthDayLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthDay, v))
}

// BirthMonthEQ applies the EQ predicate on the "birth_month" field.
func BirthMonthEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthMonth, v))
}

// BirthMonthNEQ applies the NEQ predicate on the "birth_month" field.
func BirthMonthNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthMonth, v))
}

// BirthMonthIn applies the In predicate on the "birth_month" field.
func BirthMonthIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthMonth, vs...))
}

// BirthMonthNotIn applies the NotIn predicate on the "birth_month" field.
func BirthMonthNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthMonth, vs...))
}

// BirthMonthGT applies the GT predicate on the "birth_month" field.
func BirthMonthGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthMonth, v))
}

// BirthMonthGTE applies the GTE predicate on the "birth_month" field.
func BirthMonthGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthMonth, v))
}

// BirthMonthLT applies the LT predicate on the "birth_month" field.
func BirthMonthLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthMonth, v))
}

// BirthMonthLTE applies the LTE predicate on the "birth_month" field.
func BirthMonthLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthMonth, v))
}

// BirthYearEQ applies the EQ predicate on the "birth_year" field.
func BirthYearEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthYear, v))
}

// BirthYearNEQ applies the NEQ predicate on the "birth_year" field.
func BirthYearNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthYear, v))
}

// BirthYearIn applies the In predicate on the "birth_year" field.
func BirthYearIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthYear, vs...))
}

// BirthYearNotIn applies the NotIn predicate on the "birth_year" field.
func BirthYearNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthYear, vs...))
}

// BirthYearGT applies the GT predicate on the "birth_year" field.
func BirthYearGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthYear, v))
}

// BirthYearGTE applies the GTE predicate on the "birth_year" field.
func BirthYearGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthYear, v))
}

// BirthYearLT applies the LT predicate on the "birth_year" field.
func BirthYearLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthYear, v))
}

// BirthYearLTE applies the LTE predicate on the "birth_year" field.
func BirthYearLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthYear, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPasswords applies the HasEdge predicate on the "passwords" edge.
func HasPasswords() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PasswordsTable, PasswordsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPasswordsWith applies the HasEdge predicate on the "passwords" edge with a given conditions (other predicates).
func HasPasswordsWith(preds ...predicate.Password) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PasswordsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PasswordsTable, PasswordsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommunities applies the HasEdge predicate on the "communities" edge.
func HasCommunities() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CommunitiesTable, CommunitiesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommunitiesWith applies the HasEdge predicate on the "communities" edge with a given conditions (other predicates).
func HasCommunitiesWith(preds ...predicate.Community) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommunitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CommunitiesTable, CommunitiesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompanies applies the HasEdge predicate on the "companies" edge.
func HasCompanies() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CompaniesTable, CompaniesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompaniesWith applies the HasEdge predicate on the "companies" edge with a given conditions (other predicates).
func HasCompaniesWith(preds ...predicate.Company) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompaniesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CompaniesTable, CompaniesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
