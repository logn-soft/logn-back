// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/logn-soft/logn-back/internal/ent/technology"
	"github.com/logn-soft/logn-back/internal/ent/technologylevel"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"
)

// TechnologyLevel is the model entity for the TechnologyLevel schema.
type TechnologyLevel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// TechnologyID holds the value of the "technology_id" field.
	TechnologyID int `json:"technology_id,omitempty"`
	// VacancyID holds the value of the "vacancy_id" field.
	VacancyID int `json:"vacancy_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TechnologyLevelQuery when eager-loading is set.
	Edges TechnologyLevelEdges `json:"edges"`
}

// TechnologyLevelEdges holds the relations/edges for other nodes in the graph.
type TechnologyLevelEdges struct {
	// Technology holds the value of the technology edge.
	Technology *Technology `json:"technology,omitempty"`
	// Vacancy holds the value of the vacancy edge.
	Vacancy *Vacancy `json:"vacancy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TechnologyOrErr returns the Technology value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TechnologyLevelEdges) TechnologyOrErr() (*Technology, error) {
	if e.loadedTypes[0] {
		if e.Technology == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: technology.Label}
		}
		return e.Technology, nil
	}
	return nil, &NotLoadedError{edge: "technology"}
}

// VacancyOrErr returns the Vacancy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TechnologyLevelEdges) VacancyOrErr() (*Vacancy, error) {
	if e.loadedTypes[1] {
		if e.Vacancy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vacancy.Label}
		}
		return e.Vacancy, nil
	}
	return nil, &NotLoadedError{edge: "vacancy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TechnologyLevel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case technologylevel.FieldID, technologylevel.FieldLevel, technologylevel.FieldTechnologyID, technologylevel.FieldVacancyID:
			values[i] = new(sql.NullInt64)
		case technologylevel.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TechnologyLevel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TechnologyLevel fields.
func (tl *TechnologyLevel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case technologylevel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int(value.Int64)
		case technologylevel.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				tl.Level = int(value.Int64)
			}
		case technologylevel.FieldTechnologyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field technology_id", values[i])
			} else if value.Valid {
				tl.TechnologyID = int(value.Int64)
			}
		case technologylevel.FieldVacancyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vacancy_id", values[i])
			} else if value.Valid {
				tl.VacancyID = int(value.Int64)
			}
		case technologylevel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tl.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTechnology queries the "technology" edge of the TechnologyLevel entity.
func (tl *TechnologyLevel) QueryTechnology() *TechnologyQuery {
	return NewTechnologyLevelClient(tl.config).QueryTechnology(tl)
}

// QueryVacancy queries the "vacancy" edge of the TechnologyLevel entity.
func (tl *TechnologyLevel) QueryVacancy() *VacancyQuery {
	return NewTechnologyLevelClient(tl.config).QueryVacancy(tl)
}

// Update returns a builder for updating this TechnologyLevel.
// Note that you need to call TechnologyLevel.Unwrap() before calling this method if this TechnologyLevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TechnologyLevel) Update() *TechnologyLevelUpdateOne {
	return NewTechnologyLevelClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TechnologyLevel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TechnologyLevel) Unwrap() *TechnologyLevel {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TechnologyLevel is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TechnologyLevel) String() string {
	var builder strings.Builder
	builder.WriteString("TechnologyLevel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", tl.Level))
	builder.WriteString(", ")
	builder.WriteString("technology_id=")
	builder.WriteString(fmt.Sprintf("%v", tl.TechnologyID))
	builder.WriteString(", ")
	builder.WriteString("vacancy_id=")
	builder.WriteString(fmt.Sprintf("%v", tl.VacancyID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TechnologyLevels is a parsable slice of TechnologyLevel.
type TechnologyLevels []*TechnologyLevel

func (tl TechnologyLevels) config(cfg config) {
	for _i := range tl {
		tl[_i].config = cfg
	}
}
