// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/logn-soft/logn-back/internal/ent/area"
	"github.com/logn-soft/logn-back/internal/ent/location"
	"github.com/logn-soft/logn-back/internal/ent/schema"
	"github.com/logn-soft/logn-back/internal/ent/technology"
	"github.com/logn-soft/logn-back/internal/ent/technologylevel"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	areaFields := schema.Area{}.Fields()
	_ = areaFields
	// areaDescName is the schema descriptor for name field.
	areaDescName := areaFields[0].Descriptor()
	// area.NameValidator is a validator for the "name" field. It is called by the builders before save.
	area.NameValidator = func() func(string) error {
		validators := areaDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// areaDescCreatedAt is the schema descriptor for created_at field.
	areaDescCreatedAt := areaFields[1].Descriptor()
	// area.DefaultCreatedAt holds the default value on creation for the created_at field.
	area.DefaultCreatedAt = areaDescCreatedAt.Default.(func() time.Time)
	locationFields := schema.Location{}.Fields()
	_ = locationFields
	// locationDescName is the schema descriptor for name field.
	locationDescName := locationFields[0].Descriptor()
	// location.NameValidator is a validator for the "name" field. It is called by the builders before save.
	location.NameValidator = func() func(string) error {
		validators := locationDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// locationDescCreatedAt is the schema descriptor for created_at field.
	locationDescCreatedAt := locationFields[1].Descriptor()
	// location.DefaultCreatedAt holds the default value on creation for the created_at field.
	location.DefaultCreatedAt = locationDescCreatedAt.Default.(func() time.Time)
	technologyFields := schema.Technology{}.Fields()
	_ = technologyFields
	// technologyDescName is the schema descriptor for name field.
	technologyDescName := technologyFields[0].Descriptor()
	// technology.NameValidator is a validator for the "name" field. It is called by the builders before save.
	technology.NameValidator = func() func(string) error {
		validators := technologyDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// technologyDescCreatedAt is the schema descriptor for created_at field.
	technologyDescCreatedAt := technologyFields[1].Descriptor()
	// technology.DefaultCreatedAt holds the default value on creation for the created_at field.
	technology.DefaultCreatedAt = technologyDescCreatedAt.Default.(func() time.Time)
	technologylevelFields := schema.TechnologyLevel{}.Fields()
	_ = technologylevelFields
	// technologylevelDescLevel is the schema descriptor for level field.
	technologylevelDescLevel := technologylevelFields[0].Descriptor()
	// technologylevel.DefaultLevel holds the default value on creation for the level field.
	technologylevel.DefaultLevel = technologylevelDescLevel.Default.(int)
	// technologylevel.LevelValidator is a validator for the "level" field. It is called by the builders before save.
	technologylevel.LevelValidator = func() func(int) error {
		validators := technologylevelDescLevel.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(level int) error {
			for _, fn := range fns {
				if err := fn(level); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// technologylevelDescCreatedAt is the schema descriptor for created_at field.
	technologylevelDescCreatedAt := technologylevelFields[3].Descriptor()
	// technologylevel.DefaultCreatedAt holds the default value on creation for the created_at field.
	technologylevel.DefaultCreatedAt = technologylevelDescCreatedAt.Default.(func() time.Time)
	vacancyFields := schema.Vacancy{}.Fields()
	_ = vacancyFields
	// vacancyDescName is the schema descriptor for name field.
	vacancyDescName := vacancyFields[0].Descriptor()
	// vacancy.NameValidator is a validator for the "name" field. It is called by the builders before save.
	vacancy.NameValidator = func() func(string) error {
		validators := vacancyDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// vacancyDescDescription is the schema descriptor for description field.
	vacancyDescDescription := vacancyFields[1].Descriptor()
	// vacancy.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	vacancy.DescriptionValidator = func() func(string) error {
		validators := vacancyDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// vacancyDescMinSalary is the schema descriptor for min_salary field.
	vacancyDescMinSalary := vacancyFields[3].Descriptor()
	// vacancy.MinSalaryValidator is a validator for the "min_salary" field. It is called by the builders before save.
	vacancy.MinSalaryValidator = vacancyDescMinSalary.Validators[0].(func(int) error)
	// vacancyDescCreatedAt is the schema descriptor for created_at field.
	vacancyDescCreatedAt := vacancyFields[7].Descriptor()
	// vacancy.DefaultCreatedAt holds the default value on creation for the created_at field.
	vacancy.DefaultCreatedAt = vacancyDescCreatedAt.Default.(func() time.Time)
}
