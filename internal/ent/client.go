// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/logn-soft/logn-back/internal/ent/migrate"

	"github.com/logn-soft/logn-back/internal/ent/area"
	"github.com/logn-soft/logn-back/internal/ent/location"
	"github.com/logn-soft/logn-back/internal/ent/technology"
	"github.com/logn-soft/logn-back/internal/ent/technologylevel"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Area is the client for interacting with the Area builders.
	Area *AreaClient
	// Location is the client for interacting with the Location builders.
	Location *LocationClient
	// Technology is the client for interacting with the Technology builders.
	Technology *TechnologyClient
	// TechnologyLevel is the client for interacting with the TechnologyLevel builders.
	TechnologyLevel *TechnologyLevelClient
	// Vacancy is the client for interacting with the Vacancy builders.
	Vacancy *VacancyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Area = NewAreaClient(c.config)
	c.Location = NewLocationClient(c.config)
	c.Technology = NewTechnologyClient(c.config)
	c.TechnologyLevel = NewTechnologyLevelClient(c.config)
	c.Vacancy = NewVacancyClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the ent source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Area:            NewAreaClient(cfg),
		Location:        NewLocationClient(cfg),
		Technology:      NewTechnologyClient(cfg),
		TechnologyLevel: NewTechnologyLevelClient(cfg),
		Vacancy:         NewVacancyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Area:            NewAreaClient(cfg),
		Location:        NewLocationClient(cfg),
		Technology:      NewTechnologyClient(cfg),
		TechnologyLevel: NewTechnologyLevelClient(cfg),
		Vacancy:         NewVacancyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Area.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Area.Use(hooks...)
	c.Location.Use(hooks...)
	c.Technology.Use(hooks...)
	c.TechnologyLevel.Use(hooks...)
	c.Vacancy.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Area.Intercept(interceptors...)
	c.Location.Intercept(interceptors...)
	c.Technology.Intercept(interceptors...)
	c.TechnologyLevel.Intercept(interceptors...)
	c.Vacancy.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AreaMutation:
		return c.Area.mutate(ctx, m)
	case *LocationMutation:
		return c.Location.mutate(ctx, m)
	case *TechnologyMutation:
		return c.Technology.mutate(ctx, m)
	case *TechnologyLevelMutation:
		return c.TechnologyLevel.mutate(ctx, m)
	case *VacancyMutation:
		return c.Vacancy.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AreaClient is a client for the Area schema.
type AreaClient struct {
	config
}

// NewAreaClient returns a client for the Area from the given config.
func NewAreaClient(c config) *AreaClient {
	return &AreaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `area.Hooks(f(g(h())))`.
func (c *AreaClient) Use(hooks ...Hook) {
	c.hooks.Area = append(c.hooks.Area, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `area.Intercept(f(g(h())))`.
func (c *AreaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Area = append(c.inters.Area, interceptors...)
}

// Create returns a builder for creating a Area entity.
func (c *AreaClient) Create() *AreaCreate {
	mutation := newAreaMutation(c.config, OpCreate)
	return &AreaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Area entities.
func (c *AreaClient) CreateBulk(builders ...*AreaCreate) *AreaCreateBulk {
	return &AreaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Area.
func (c *AreaClient) Update() *AreaUpdate {
	mutation := newAreaMutation(c.config, OpUpdate)
	return &AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AreaClient) UpdateOne(a *Area) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withArea(a))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AreaClient) UpdateOneID(id int) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withAreaID(id))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Area.
func (c *AreaClient) Delete() *AreaDelete {
	mutation := newAreaMutation(c.config, OpDelete)
	return &AreaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AreaClient) DeleteOne(a *Area) *AreaDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AreaClient) DeleteOneID(id int) *AreaDeleteOne {
	builder := c.Delete().Where(area.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AreaDeleteOne{builder}
}

// Query returns a query builder for Area.
func (c *AreaClient) Query() *AreaQuery {
	return &AreaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArea},
		inters: c.Interceptors(),
	}
}

// Get returns a Area entity by its id.
func (c *AreaClient) Get(ctx context.Context, id int) (*Area, error) {
	return c.Query().Where(area.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AreaClient) GetX(ctx context.Context, id int) *Area {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVacancies queries the vacancies edge of a Area.
func (c *AreaClient) QueryVacancies(a *Area) *VacancyQuery {
	query := (&VacancyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(vacancy.Table, vacancy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, area.VacanciesTable, area.VacanciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AreaClient) Hooks() []Hook {
	return c.hooks.Area
}

// Interceptors returns the client interceptors.
func (c *AreaClient) Interceptors() []Interceptor {
	return c.inters.Area
}

func (c *AreaClient) mutate(ctx context.Context, m *AreaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AreaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AreaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Area mutation op: %q", m.Op())
	}
}

// LocationClient is a client for the Location schema.
type LocationClient struct {
	config
}

// NewLocationClient returns a client for the Location from the given config.
func NewLocationClient(c config) *LocationClient {
	return &LocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `location.Hooks(f(g(h())))`.
func (c *LocationClient) Use(hooks ...Hook) {
	c.hooks.Location = append(c.hooks.Location, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `location.Intercept(f(g(h())))`.
func (c *LocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Location = append(c.inters.Location, interceptors...)
}

// Create returns a builder for creating a Location entity.
func (c *LocationClient) Create() *LocationCreate {
	mutation := newLocationMutation(c.config, OpCreate)
	return &LocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Location entities.
func (c *LocationClient) CreateBulk(builders ...*LocationCreate) *LocationCreateBulk {
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Location.
func (c *LocationClient) Update() *LocationUpdate {
	mutation := newLocationMutation(c.config, OpUpdate)
	return &LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationClient) UpdateOne(l *Location) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocation(l))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationClient) UpdateOneID(id int) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocationID(id))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Location.
func (c *LocationClient) Delete() *LocationDelete {
	mutation := newLocationMutation(c.config, OpDelete)
	return &LocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocationClient) DeleteOne(l *Location) *LocationDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocationClient) DeleteOneID(id int) *LocationDeleteOne {
	builder := c.Delete().Where(location.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationDeleteOne{builder}
}

// Query returns a query builder for Location.
func (c *LocationClient) Query() *LocationQuery {
	return &LocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocation},
		inters: c.Interceptors(),
	}
}

// Get returns a Location entity by its id.
func (c *LocationClient) Get(ctx context.Context, id int) (*Location, error) {
	return c.Query().Where(location.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationClient) GetX(ctx context.Context, id int) *Location {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVacancies queries the vacancies edge of a Location.
func (c *LocationClient) QueryVacancies(l *Location) *VacancyQuery {
	query := (&VacancyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(vacancy.Table, vacancy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, location.VacanciesTable, location.VacanciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationClient) Hooks() []Hook {
	return c.hooks.Location
}

// Interceptors returns the client interceptors.
func (c *LocationClient) Interceptors() []Interceptor {
	return c.inters.Location
}

func (c *LocationClient) mutate(ctx context.Context, m *LocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Location mutation op: %q", m.Op())
	}
}

// TechnologyClient is a client for the Technology schema.
type TechnologyClient struct {
	config
}

// NewTechnologyClient returns a client for the Technology from the given config.
func NewTechnologyClient(c config) *TechnologyClient {
	return &TechnologyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `technology.Hooks(f(g(h())))`.
func (c *TechnologyClient) Use(hooks ...Hook) {
	c.hooks.Technology = append(c.hooks.Technology, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `technology.Intercept(f(g(h())))`.
func (c *TechnologyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Technology = append(c.inters.Technology, interceptors...)
}

// Create returns a builder for creating a Technology entity.
func (c *TechnologyClient) Create() *TechnologyCreate {
	mutation := newTechnologyMutation(c.config, OpCreate)
	return &TechnologyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Technology entities.
func (c *TechnologyClient) CreateBulk(builders ...*TechnologyCreate) *TechnologyCreateBulk {
	return &TechnologyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Technology.
func (c *TechnologyClient) Update() *TechnologyUpdate {
	mutation := newTechnologyMutation(c.config, OpUpdate)
	return &TechnologyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TechnologyClient) UpdateOne(t *Technology) *TechnologyUpdateOne {
	mutation := newTechnologyMutation(c.config, OpUpdateOne, withTechnology(t))
	return &TechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TechnologyClient) UpdateOneID(id int) *TechnologyUpdateOne {
	mutation := newTechnologyMutation(c.config, OpUpdateOne, withTechnologyID(id))
	return &TechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Technology.
func (c *TechnologyClient) Delete() *TechnologyDelete {
	mutation := newTechnologyMutation(c.config, OpDelete)
	return &TechnologyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TechnologyClient) DeleteOne(t *Technology) *TechnologyDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TechnologyClient) DeleteOneID(id int) *TechnologyDeleteOne {
	builder := c.Delete().Where(technology.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TechnologyDeleteOne{builder}
}

// Query returns a query builder for Technology.
func (c *TechnologyClient) Query() *TechnologyQuery {
	return &TechnologyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTechnology},
		inters: c.Interceptors(),
	}
}

// Get returns a Technology entity by its id.
func (c *TechnologyClient) Get(ctx context.Context, id int) (*Technology, error) {
	return c.Query().Where(technology.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TechnologyClient) GetX(ctx context.Context, id int) *Technology {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVacancies queries the vacancies edge of a Technology.
func (c *TechnologyClient) QueryVacancies(t *Technology) *VacancyQuery {
	query := (&VacancyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(technology.Table, technology.FieldID, id),
			sqlgraph.To(vacancy.Table, vacancy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, technology.VacanciesTable, technology.VacanciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTechnologyLevels queries the technology_levels edge of a Technology.
func (c *TechnologyClient) QueryTechnologyLevels(t *Technology) *TechnologyLevelQuery {
	query := (&TechnologyLevelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(technology.Table, technology.FieldID, id),
			sqlgraph.To(technologylevel.Table, technologylevel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, technology.TechnologyLevelsTable, technology.TechnologyLevelsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TechnologyClient) Hooks() []Hook {
	return c.hooks.Technology
}

// Interceptors returns the client interceptors.
func (c *TechnologyClient) Interceptors() []Interceptor {
	return c.inters.Technology
}

func (c *TechnologyClient) mutate(ctx context.Context, m *TechnologyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TechnologyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TechnologyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TechnologyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Technology mutation op: %q", m.Op())
	}
}

// TechnologyLevelClient is a client for the TechnologyLevel schema.
type TechnologyLevelClient struct {
	config
}

// NewTechnologyLevelClient returns a client for the TechnologyLevel from the given config.
func NewTechnologyLevelClient(c config) *TechnologyLevelClient {
	return &TechnologyLevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `technologylevel.Hooks(f(g(h())))`.
func (c *TechnologyLevelClient) Use(hooks ...Hook) {
	c.hooks.TechnologyLevel = append(c.hooks.TechnologyLevel, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `technologylevel.Intercept(f(g(h())))`.
func (c *TechnologyLevelClient) Intercept(interceptors ...Interceptor) {
	c.inters.TechnologyLevel = append(c.inters.TechnologyLevel, interceptors...)
}

// Create returns a builder for creating a TechnologyLevel entity.
func (c *TechnologyLevelClient) Create() *TechnologyLevelCreate {
	mutation := newTechnologyLevelMutation(c.config, OpCreate)
	return &TechnologyLevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TechnologyLevel entities.
func (c *TechnologyLevelClient) CreateBulk(builders ...*TechnologyLevelCreate) *TechnologyLevelCreateBulk {
	return &TechnologyLevelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TechnologyLevel.
func (c *TechnologyLevelClient) Update() *TechnologyLevelUpdate {
	mutation := newTechnologyLevelMutation(c.config, OpUpdate)
	return &TechnologyLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TechnologyLevelClient) UpdateOne(tl *TechnologyLevel) *TechnologyLevelUpdateOne {
	mutation := newTechnologyLevelMutation(c.config, OpUpdateOne, withTechnologyLevel(tl))
	return &TechnologyLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TechnologyLevelClient) UpdateOneID(id int) *TechnologyLevelUpdateOne {
	mutation := newTechnologyLevelMutation(c.config, OpUpdateOne, withTechnologyLevelID(id))
	return &TechnologyLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TechnologyLevel.
func (c *TechnologyLevelClient) Delete() *TechnologyLevelDelete {
	mutation := newTechnologyLevelMutation(c.config, OpDelete)
	return &TechnologyLevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TechnologyLevelClient) DeleteOne(tl *TechnologyLevel) *TechnologyLevelDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TechnologyLevelClient) DeleteOneID(id int) *TechnologyLevelDeleteOne {
	builder := c.Delete().Where(technologylevel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TechnologyLevelDeleteOne{builder}
}

// Query returns a query builder for TechnologyLevel.
func (c *TechnologyLevelClient) Query() *TechnologyLevelQuery {
	return &TechnologyLevelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTechnologyLevel},
		inters: c.Interceptors(),
	}
}

// Get returns a TechnologyLevel entity by its id.
func (c *TechnologyLevelClient) Get(ctx context.Context, id int) (*TechnologyLevel, error) {
	return c.Query().Where(technologylevel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TechnologyLevelClient) GetX(ctx context.Context, id int) *TechnologyLevel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTechnology queries the technology edge of a TechnologyLevel.
func (c *TechnologyLevelClient) QueryTechnology(tl *TechnologyLevel) *TechnologyQuery {
	query := (&TechnologyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(technologylevel.Table, technologylevel.FieldID, id),
			sqlgraph.To(technology.Table, technology.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, technologylevel.TechnologyTable, technologylevel.TechnologyColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVacancy queries the vacancy edge of a TechnologyLevel.
func (c *TechnologyLevelClient) QueryVacancy(tl *TechnologyLevel) *VacancyQuery {
	query := (&VacancyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(technologylevel.Table, technologylevel.FieldID, id),
			sqlgraph.To(vacancy.Table, vacancy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, technologylevel.VacancyTable, technologylevel.VacancyColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TechnologyLevelClient) Hooks() []Hook {
	return c.hooks.TechnologyLevel
}

// Interceptors returns the client interceptors.
func (c *TechnologyLevelClient) Interceptors() []Interceptor {
	return c.inters.TechnologyLevel
}

func (c *TechnologyLevelClient) mutate(ctx context.Context, m *TechnologyLevelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TechnologyLevelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TechnologyLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TechnologyLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TechnologyLevelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TechnologyLevel mutation op: %q", m.Op())
	}
}

// VacancyClient is a client for the Vacancy schema.
type VacancyClient struct {
	config
}

// NewVacancyClient returns a client for the Vacancy from the given config.
func NewVacancyClient(c config) *VacancyClient {
	return &VacancyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vacancy.Hooks(f(g(h())))`.
func (c *VacancyClient) Use(hooks ...Hook) {
	c.hooks.Vacancy = append(c.hooks.Vacancy, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vacancy.Intercept(f(g(h())))`.
func (c *VacancyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vacancy = append(c.inters.Vacancy, interceptors...)
}

// Create returns a builder for creating a Vacancy entity.
func (c *VacancyClient) Create() *VacancyCreate {
	mutation := newVacancyMutation(c.config, OpCreate)
	return &VacancyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vacancy entities.
func (c *VacancyClient) CreateBulk(builders ...*VacancyCreate) *VacancyCreateBulk {
	return &VacancyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vacancy.
func (c *VacancyClient) Update() *VacancyUpdate {
	mutation := newVacancyMutation(c.config, OpUpdate)
	return &VacancyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VacancyClient) UpdateOne(v *Vacancy) *VacancyUpdateOne {
	mutation := newVacancyMutation(c.config, OpUpdateOne, withVacancy(v))
	return &VacancyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VacancyClient) UpdateOneID(id int) *VacancyUpdateOne {
	mutation := newVacancyMutation(c.config, OpUpdateOne, withVacancyID(id))
	return &VacancyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vacancy.
func (c *VacancyClient) Delete() *VacancyDelete {
	mutation := newVacancyMutation(c.config, OpDelete)
	return &VacancyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VacancyClient) DeleteOne(v *Vacancy) *VacancyDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VacancyClient) DeleteOneID(id int) *VacancyDeleteOne {
	builder := c.Delete().Where(vacancy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VacancyDeleteOne{builder}
}

// Query returns a query builder for Vacancy.
func (c *VacancyClient) Query() *VacancyQuery {
	return &VacancyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVacancy},
		inters: c.Interceptors(),
	}
}

// Get returns a Vacancy entity by its id.
func (c *VacancyClient) Get(ctx context.Context, id int) (*Vacancy, error) {
	return c.Query().Where(vacancy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VacancyClient) GetX(ctx context.Context, id int) *Vacancy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTechnologies queries the technologies edge of a Vacancy.
func (c *VacancyClient) QueryTechnologies(v *Vacancy) *TechnologyQuery {
	query := (&TechnologyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancy.Table, vacancy.FieldID, id),
			sqlgraph.To(technology.Table, technology.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, vacancy.TechnologiesTable, vacancy.TechnologiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocations queries the locations edge of a Vacancy.
func (c *VacancyClient) QueryLocations(v *Vacancy) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancy.Table, vacancy.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, vacancy.LocationsTable, vacancy.LocationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAreas queries the areas edge of a Vacancy.
func (c *VacancyClient) QueryAreas(v *Vacancy) *AreaQuery {
	query := (&AreaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancy.Table, vacancy.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, vacancy.AreasTable, vacancy.AreasPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTechnologyLevels queries the technology_levels edge of a Vacancy.
func (c *VacancyClient) QueryTechnologyLevels(v *Vacancy) *TechnologyLevelQuery {
	query := (&TechnologyLevelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancy.Table, vacancy.FieldID, id),
			sqlgraph.To(technologylevel.Table, technologylevel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, vacancy.TechnologyLevelsTable, vacancy.TechnologyLevelsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VacancyClient) Hooks() []Hook {
	return c.hooks.Vacancy
}

// Interceptors returns the client interceptors.
func (c *VacancyClient) Interceptors() []Interceptor {
	return c.inters.Vacancy
}

func (c *VacancyClient) mutate(ctx context.Context, m *VacancyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VacancyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VacancyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VacancyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VacancyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vacancy mutation op: %q", m.Op())
	}
}
