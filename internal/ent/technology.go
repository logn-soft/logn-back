// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/logn-soft/logn-back/internal/ent/technology"
)

// Technology is the model entity for the Technology schema.
type Technology struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TechnologyQuery when eager-loading is set.
	Edges TechnologyEdges `json:"edges"`
}

// TechnologyEdges holds the relations/edges for other nodes in the graph.
type TechnologyEdges struct {
	// Vacancies holds the value of the vacancies edge.
	Vacancies []*Vacancy `json:"vacancies,omitempty"`
	// TechnologyLevels holds the value of the technology_levels edge.
	TechnologyLevels []*TechnologyLevel `json:"technology_levels,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VacanciesOrErr returns the Vacancies value or an error if the edge
// was not loaded in eager-loading.
func (e TechnologyEdges) VacanciesOrErr() ([]*Vacancy, error) {
	if e.loadedTypes[0] {
		return e.Vacancies, nil
	}
	return nil, &NotLoadedError{edge: "vacancies"}
}

// TechnologyLevelsOrErr returns the TechnologyLevels value or an error if the edge
// was not loaded in eager-loading.
func (e TechnologyEdges) TechnologyLevelsOrErr() ([]*TechnologyLevel, error) {
	if e.loadedTypes[1] {
		return e.TechnologyLevels, nil
	}
	return nil, &NotLoadedError{edge: "technology_levels"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Technology) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case technology.FieldID:
			values[i] = new(sql.NullInt64)
		case technology.FieldName:
			values[i] = new(sql.NullString)
		case technology.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Technology", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Technology fields.
func (t *Technology) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case technology.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case technology.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case technology.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryVacancies queries the "vacancies" edge of the Technology entity.
func (t *Technology) QueryVacancies() *VacancyQuery {
	return NewTechnologyClient(t.config).QueryVacancies(t)
}

// QueryTechnologyLevels queries the "technology_levels" edge of the Technology entity.
func (t *Technology) QueryTechnologyLevels() *TechnologyLevelQuery {
	return NewTechnologyClient(t.config).QueryTechnologyLevels(t)
}

// Update returns a builder for updating this Technology.
// Note that you need to call Technology.Unwrap() before calling this method if this Technology
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Technology) Update() *TechnologyUpdateOne {
	return NewTechnologyClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Technology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Technology) Unwrap() *Technology {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Technology is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Technology) String() string {
	var builder strings.Builder
	builder.WriteString("Technology(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Technologies is a parsable slice of Technology.
type Technologies []*Technology

func (t Technologies) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
