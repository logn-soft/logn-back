// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
	"github.com/logn-soft/logn-back/internal/ent/technology"
	"github.com/logn-soft/logn-back/internal/ent/technologylevel"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"
)

// TechnologyUpdate is the builder for updating Technology entities.
type TechnologyUpdate struct {
	config
	hooks    []Hook
	mutation *TechnologyMutation
}

// Where appends a list predicates to the TechnologyUpdate builder.
func (tu *TechnologyUpdate) Where(ps ...predicate.Technology) *TechnologyUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TechnologyUpdate) SetName(s string) *TechnologyUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TechnologyUpdate) SetCreatedAt(t time.Time) *TechnologyUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TechnologyUpdate) SetNillableCreatedAt(t *time.Time) *TechnologyUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// AddVacancyIDs adds the "vacancies" edge to the Vacancy entity by IDs.
func (tu *TechnologyUpdate) AddVacancyIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.AddVacancyIDs(ids...)
	return tu
}

// AddVacancies adds the "vacancies" edges to the Vacancy entity.
func (tu *TechnologyUpdate) AddVacancies(v ...*Vacancy) *TechnologyUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return tu.AddVacancyIDs(ids...)
}

// AddTechnologyLevelIDs adds the "technology_levels" edge to the TechnologyLevel entity by IDs.
func (tu *TechnologyUpdate) AddTechnologyLevelIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.AddTechnologyLevelIDs(ids...)
	return tu
}

// AddTechnologyLevels adds the "technology_levels" edges to the TechnologyLevel entity.
func (tu *TechnologyUpdate) AddTechnologyLevels(t ...*TechnologyLevel) *TechnologyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTechnologyLevelIDs(ids...)
}

// Mutation returns the TechnologyMutation object of the builder.
func (tu *TechnologyUpdate) Mutation() *TechnologyMutation {
	return tu.mutation
}

// ClearVacancies clears all "vacancies" edges to the Vacancy entity.
func (tu *TechnologyUpdate) ClearVacancies() *TechnologyUpdate {
	tu.mutation.ClearVacancies()
	return tu
}

// RemoveVacancyIDs removes the "vacancies" edge to Vacancy entities by IDs.
func (tu *TechnologyUpdate) RemoveVacancyIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.RemoveVacancyIDs(ids...)
	return tu
}

// RemoveVacancies removes "vacancies" edges to Vacancy entities.
func (tu *TechnologyUpdate) RemoveVacancies(v ...*Vacancy) *TechnologyUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return tu.RemoveVacancyIDs(ids...)
}

// ClearTechnologyLevels clears all "technology_levels" edges to the TechnologyLevel entity.
func (tu *TechnologyUpdate) ClearTechnologyLevels() *TechnologyUpdate {
	tu.mutation.ClearTechnologyLevels()
	return tu
}

// RemoveTechnologyLevelIDs removes the "technology_levels" edge to TechnologyLevel entities by IDs.
func (tu *TechnologyUpdate) RemoveTechnologyLevelIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.RemoveTechnologyLevelIDs(ids...)
	return tu
}

// RemoveTechnologyLevels removes "technology_levels" edges to TechnologyLevel entities.
func (tu *TechnologyUpdate) RemoveTechnologyLevels(t ...*TechnologyLevel) *TechnologyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTechnologyLevelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TechnologyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TechnologyMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TechnologyUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TechnologyUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TechnologyUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TechnologyUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := technology.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Technology.name": %w`, err)}
		}
	}
	return nil
}

func (tu *TechnologyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   technology.Table,
			Columns: technology.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technology.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(technology.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(technology.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.VacanciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technology.VacanciesTable,
			Columns: technology.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		createE := &TechnologyLevelCreate{config: tu.config, mutation: newTechnologyLevelMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedVacanciesIDs(); len(nodes) > 0 && !tu.mutation.VacanciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technology.VacanciesTable,
			Columns: technology.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TechnologyLevelCreate{config: tu.config, mutation: newTechnologyLevelMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.VacanciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technology.VacanciesTable,
			Columns: technology.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TechnologyLevelCreate{config: tu.config, mutation: newTechnologyLevelMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TechnologyLevelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   technology.TechnologyLevelsTable,
			Columns: []string{technology.TechnologyLevelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologylevel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTechnologyLevelsIDs(); len(nodes) > 0 && !tu.mutation.TechnologyLevelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   technology.TechnologyLevelsTable,
			Columns: []string{technology.TechnologyLevelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologylevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TechnologyLevelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   technology.TechnologyLevelsTable,
			Columns: []string{technology.TechnologyLevelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologylevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TechnologyUpdateOne is the builder for updating a single Technology entity.
type TechnologyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TechnologyMutation
}

// SetName sets the "name" field.
func (tuo *TechnologyUpdateOne) SetName(s string) *TechnologyUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TechnologyUpdateOne) SetCreatedAt(t time.Time) *TechnologyUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TechnologyUpdateOne) SetNillableCreatedAt(t *time.Time) *TechnologyUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// AddVacancyIDs adds the "vacancies" edge to the Vacancy entity by IDs.
func (tuo *TechnologyUpdateOne) AddVacancyIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.AddVacancyIDs(ids...)
	return tuo
}

// AddVacancies adds the "vacancies" edges to the Vacancy entity.
func (tuo *TechnologyUpdateOne) AddVacancies(v ...*Vacancy) *TechnologyUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return tuo.AddVacancyIDs(ids...)
}

// AddTechnologyLevelIDs adds the "technology_levels" edge to the TechnologyLevel entity by IDs.
func (tuo *TechnologyUpdateOne) AddTechnologyLevelIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.AddTechnologyLevelIDs(ids...)
	return tuo
}

// AddTechnologyLevels adds the "technology_levels" edges to the TechnologyLevel entity.
func (tuo *TechnologyUpdateOne) AddTechnologyLevels(t ...*TechnologyLevel) *TechnologyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTechnologyLevelIDs(ids...)
}

// Mutation returns the TechnologyMutation object of the builder.
func (tuo *TechnologyUpdateOne) Mutation() *TechnologyMutation {
	return tuo.mutation
}

// ClearVacancies clears all "vacancies" edges to the Vacancy entity.
func (tuo *TechnologyUpdateOne) ClearVacancies() *TechnologyUpdateOne {
	tuo.mutation.ClearVacancies()
	return tuo
}

// RemoveVacancyIDs removes the "vacancies" edge to Vacancy entities by IDs.
func (tuo *TechnologyUpdateOne) RemoveVacancyIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.RemoveVacancyIDs(ids...)
	return tuo
}

// RemoveVacancies removes "vacancies" edges to Vacancy entities.
func (tuo *TechnologyUpdateOne) RemoveVacancies(v ...*Vacancy) *TechnologyUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return tuo.RemoveVacancyIDs(ids...)
}

// ClearTechnologyLevels clears all "technology_levels" edges to the TechnologyLevel entity.
func (tuo *TechnologyUpdateOne) ClearTechnologyLevels() *TechnologyUpdateOne {
	tuo.mutation.ClearTechnologyLevels()
	return tuo
}

// RemoveTechnologyLevelIDs removes the "technology_levels" edge to TechnologyLevel entities by IDs.
func (tuo *TechnologyUpdateOne) RemoveTechnologyLevelIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.RemoveTechnologyLevelIDs(ids...)
	return tuo
}

// RemoveTechnologyLevels removes "technology_levels" edges to TechnologyLevel entities.
func (tuo *TechnologyUpdateOne) RemoveTechnologyLevels(t ...*TechnologyLevel) *TechnologyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTechnologyLevelIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TechnologyUpdateOne) Select(field string, fields ...string) *TechnologyUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Technology entity.
func (tuo *TechnologyUpdateOne) Save(ctx context.Context) (*Technology, error) {
	return withHooks[*Technology, TechnologyMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TechnologyUpdateOne) SaveX(ctx context.Context) *Technology {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TechnologyUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TechnologyUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TechnologyUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := technology.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Technology.name": %w`, err)}
		}
	}
	return nil
}

func (tuo *TechnologyUpdateOne) sqlSave(ctx context.Context) (_node *Technology, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   technology.Table,
			Columns: technology.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technology.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Technology.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, technology.FieldID)
		for _, f := range fields {
			if !technology.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != technology.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(technology.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(technology.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.VacanciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technology.VacanciesTable,
			Columns: technology.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		createE := &TechnologyLevelCreate{config: tuo.config, mutation: newTechnologyLevelMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedVacanciesIDs(); len(nodes) > 0 && !tuo.mutation.VacanciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technology.VacanciesTable,
			Columns: technology.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TechnologyLevelCreate{config: tuo.config, mutation: newTechnologyLevelMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.VacanciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technology.VacanciesTable,
			Columns: technology.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TechnologyLevelCreate{config: tuo.config, mutation: newTechnologyLevelMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TechnologyLevelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   technology.TechnologyLevelsTable,
			Columns: []string{technology.TechnologyLevelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologylevel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTechnologyLevelsIDs(); len(nodes) > 0 && !tuo.mutation.TechnologyLevelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   technology.TechnologyLevelsTable,
			Columns: []string{technology.TechnologyLevelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologylevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TechnologyLevelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   technology.TechnologyLevelsTable,
			Columns: []string{technology.TechnologyLevelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technologylevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Technology{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
