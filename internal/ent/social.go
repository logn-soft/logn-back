// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/logn-soft/logn-back/internal/ent/social"
)

// Social is the model entity for the Social schema.
type Social struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Fb holds the value of the "fb" field.
	Fb string `json:"fb,omitempty"`
	// Twitter holds the value of the "twitter" field.
	Twitter string `json:"twitter,omitempty"`
	// Discord holds the value of the "discord" field.
	Discord string `json:"discord,omitempty"`
	// Slack holds the value of the "slack" field.
	Slack string `json:"slack,omitempty"`
	// Other holds the value of the "other" field.
	Other string `json:"other,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SocialQuery when eager-loading is set.
	Edges SocialEdges `json:"edges"`
}

// SocialEdges holds the relations/edges for other nodes in the graph.
type SocialEdges struct {
	// Companies holds the value of the companies edge.
	Companies []*Company `json:"companies,omitempty"`
	// Communities holds the value of the communities edge.
	Communities []*Community `json:"communities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CompaniesOrErr returns the Companies value or an error if the edge
// was not loaded in eager-loading.
func (e SocialEdges) CompaniesOrErr() ([]*Company, error) {
	if e.loadedTypes[0] {
		return e.Companies, nil
	}
	return nil, &NotLoadedError{edge: "companies"}
}

// CommunitiesOrErr returns the Communities value or an error if the edge
// was not loaded in eager-loading.
func (e SocialEdges) CommunitiesOrErr() ([]*Community, error) {
	if e.loadedTypes[1] {
		return e.Communities, nil
	}
	return nil, &NotLoadedError{edge: "communities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Social) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case social.FieldID:
			values[i] = new(sql.NullInt64)
		case social.FieldFb, social.FieldTwitter, social.FieldDiscord, social.FieldSlack, social.FieldOther:
			values[i] = new(sql.NullString)
		case social.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Social", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Social fields.
func (s *Social) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case social.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case social.FieldFb:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fb", values[i])
			} else if value.Valid {
				s.Fb = value.String
			}
		case social.FieldTwitter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter", values[i])
			} else if value.Valid {
				s.Twitter = value.String
			}
		case social.FieldDiscord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord", values[i])
			} else if value.Valid {
				s.Discord = value.String
			}
		case social.FieldSlack:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slack", values[i])
			} else if value.Valid {
				s.Slack = value.String
			}
		case social.FieldOther:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other", values[i])
			} else if value.Valid {
				s.Other = value.String
			}
		case social.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCompanies queries the "companies" edge of the Social entity.
func (s *Social) QueryCompanies() *CompanyQuery {
	return NewSocialClient(s.config).QueryCompanies(s)
}

// QueryCommunities queries the "communities" edge of the Social entity.
func (s *Social) QueryCommunities() *CommunityQuery {
	return NewSocialClient(s.config).QueryCommunities(s)
}

// Update returns a builder for updating this Social.
// Note that you need to call Social.Unwrap() before calling this method if this Social
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Social) Update() *SocialUpdateOne {
	return NewSocialClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Social entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Social) Unwrap() *Social {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Social is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Social) String() string {
	var builder strings.Builder
	builder.WriteString("Social(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("fb=")
	builder.WriteString(s.Fb)
	builder.WriteString(", ")
	builder.WriteString("twitter=")
	builder.WriteString(s.Twitter)
	builder.WriteString(", ")
	builder.WriteString("discord=")
	builder.WriteString(s.Discord)
	builder.WriteString(", ")
	builder.WriteString("slack=")
	builder.WriteString(s.Slack)
	builder.WriteString(", ")
	builder.WriteString("other=")
	builder.WriteString(s.Other)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Socials is a parsable slice of Social.
type Socials []*Social

func (s Socials) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
