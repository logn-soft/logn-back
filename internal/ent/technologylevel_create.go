// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/technology"
	"github.com/logn-soft/logn-back/internal/ent/technologylevel"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"
)

// TechnologyLevelCreate is the builder for creating a TechnologyLevel entity.
type TechnologyLevelCreate struct {
	config
	mutation *TechnologyLevelMutation
	hooks    []Hook
}

// SetLevel sets the "level" field.
func (tlc *TechnologyLevelCreate) SetLevel(i int) *TechnologyLevelCreate {
	tlc.mutation.SetLevel(i)
	return tlc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (tlc *TechnologyLevelCreate) SetNillableLevel(i *int) *TechnologyLevelCreate {
	if i != nil {
		tlc.SetLevel(*i)
	}
	return tlc
}

// SetTechnologyID sets the "technology_id" field.
func (tlc *TechnologyLevelCreate) SetTechnologyID(i int) *TechnologyLevelCreate {
	tlc.mutation.SetTechnologyID(i)
	return tlc
}

// SetVacancyID sets the "vacancy_id" field.
func (tlc *TechnologyLevelCreate) SetVacancyID(i int) *TechnologyLevelCreate {
	tlc.mutation.SetVacancyID(i)
	return tlc
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TechnologyLevelCreate) SetCreatedAt(t time.Time) *TechnologyLevelCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TechnologyLevelCreate) SetNillableCreatedAt(t *time.Time) *TechnologyLevelCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetTechnology sets the "technology" edge to the Technology entity.
func (tlc *TechnologyLevelCreate) SetTechnology(t *Technology) *TechnologyLevelCreate {
	return tlc.SetTechnologyID(t.ID)
}

// SetVacancy sets the "vacancy" edge to the Vacancy entity.
func (tlc *TechnologyLevelCreate) SetVacancy(v *Vacancy) *TechnologyLevelCreate {
	return tlc.SetVacancyID(v.ID)
}

// Mutation returns the TechnologyLevelMutation object of the builder.
func (tlc *TechnologyLevelCreate) Mutation() *TechnologyLevelMutation {
	return tlc.mutation
}

// Save creates the TechnologyLevel in the database.
func (tlc *TechnologyLevelCreate) Save(ctx context.Context) (*TechnologyLevel, error) {
	tlc.defaults()
	return withHooks[*TechnologyLevel, TechnologyLevelMutation](ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TechnologyLevelCreate) SaveX(ctx context.Context) *TechnologyLevel {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TechnologyLevelCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TechnologyLevelCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TechnologyLevelCreate) defaults() {
	if _, ok := tlc.mutation.Level(); !ok {
		v := technologylevel.DefaultLevel
		tlc.mutation.SetLevel(v)
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := technologylevel.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TechnologyLevelCreate) check() error {
	if _, ok := tlc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "TechnologyLevel.level"`)}
	}
	if v, ok := tlc.mutation.Level(); ok {
		if err := technologylevel.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "TechnologyLevel.level": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.TechnologyID(); !ok {
		return &ValidationError{Name: "technology_id", err: errors.New(`ent: missing required field "TechnologyLevel.technology_id"`)}
	}
	if _, ok := tlc.mutation.VacancyID(); !ok {
		return &ValidationError{Name: "vacancy_id", err: errors.New(`ent: missing required field "TechnologyLevel.vacancy_id"`)}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TechnologyLevel.created_at"`)}
	}
	if _, ok := tlc.mutation.TechnologyID(); !ok {
		return &ValidationError{Name: "technology", err: errors.New(`ent: missing required edge "TechnologyLevel.technology"`)}
	}
	if _, ok := tlc.mutation.VacancyID(); !ok {
		return &ValidationError{Name: "vacancy", err: errors.New(`ent: missing required edge "TechnologyLevel.vacancy"`)}
	}
	return nil
}

func (tlc *TechnologyLevelCreate) sqlSave(ctx context.Context) (*TechnologyLevel, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TechnologyLevelCreate) createSpec() (*TechnologyLevel, *sqlgraph.CreateSpec) {
	var (
		_node = &TechnologyLevel{config: tlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: technologylevel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: technologylevel.FieldID,
			},
		}
	)
	if value, ok := tlc.mutation.Level(); ok {
		_spec.SetField(technologylevel.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.SetField(technologylevel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tlc.mutation.TechnologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.TechnologyTable,
			Columns: []string{technologylevel.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: technology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TechnologyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.VacancyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   technologylevel.VacancyTable,
			Columns: []string{technologylevel.VacancyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VacancyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TechnologyLevelCreateBulk is the builder for creating many TechnologyLevel entities in bulk.
type TechnologyLevelCreateBulk struct {
	config
	builders []*TechnologyLevelCreate
}

// Save creates the TechnologyLevel entities in the database.
func (tlcb *TechnologyLevelCreateBulk) Save(ctx context.Context) ([]*TechnologyLevel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TechnologyLevel, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TechnologyLevelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TechnologyLevelCreateBulk) SaveX(ctx context.Context) []*TechnologyLevel {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TechnologyLevelCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TechnologyLevelCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
