// Code generated by ent, DO NOT EDIT.

package community

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldName, v))
}

// About applies equality check predicate on the "about" field. It's identical to AboutEQ.
func About(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldAbout, v))
}

// Members applies equality check predicate on the "members" field. It's identical to MembersEQ.
func Members(v int) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldMembers, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Community {
	return predicate.Community(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Community {
	return predicate.Community(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Community {
	return predicate.Community(sql.FieldContainsFold(FieldName, v))
}

// AboutEQ applies the EQ predicate on the "about" field.
func AboutEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldAbout, v))
}

// AboutNEQ applies the NEQ predicate on the "about" field.
func AboutNEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldAbout, v))
}

// AboutIn applies the In predicate on the "about" field.
func AboutIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldAbout, vs...))
}

// AboutNotIn applies the NotIn predicate on the "about" field.
func AboutNotIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldAbout, vs...))
}

// AboutGT applies the GT predicate on the "about" field.
func AboutGT(v string) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldAbout, v))
}

// AboutGTE applies the GTE predicate on the "about" field.
func AboutGTE(v string) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldAbout, v))
}

// AboutLT applies the LT predicate on the "about" field.
func AboutLT(v string) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldAbout, v))
}

// AboutLTE applies the LTE predicate on the "about" field.
func AboutLTE(v string) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldAbout, v))
}

// AboutContains applies the Contains predicate on the "about" field.
func AboutContains(v string) predicate.Community {
	return predicate.Community(sql.FieldContains(FieldAbout, v))
}

// AboutHasPrefix applies the HasPrefix predicate on the "about" field.
func AboutHasPrefix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasPrefix(FieldAbout, v))
}

// AboutHasSuffix applies the HasSuffix predicate on the "about" field.
func AboutHasSuffix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasSuffix(FieldAbout, v))
}

// AboutEqualFold applies the EqualFold predicate on the "about" field.
func AboutEqualFold(v string) predicate.Community {
	return predicate.Community(sql.FieldEqualFold(FieldAbout, v))
}

// AboutContainsFold applies the ContainsFold predicate on the "about" field.
func AboutContainsFold(v string) predicate.Community {
	return predicate.Community(sql.FieldContainsFold(FieldAbout, v))
}

// MembersEQ applies the EQ predicate on the "members" field.
func MembersEQ(v int) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldMembers, v))
}

// MembersNEQ applies the NEQ predicate on the "members" field.
func MembersNEQ(v int) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldMembers, v))
}

// MembersIn applies the In predicate on the "members" field.
func MembersIn(vs ...int) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldMembers, vs...))
}

// MembersNotIn applies the NotIn predicate on the "members" field.
func MembersNotIn(vs ...int) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldMembers, vs...))
}

// MembersGT applies the GT predicate on the "members" field.
func MembersGT(v int) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldMembers, v))
}

// MembersGTE applies the GTE predicate on the "members" field.
func MembersGTE(v int) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldMembers, v))
}

// MembersLT applies the LT predicate on the "members" field.
func MembersLT(v int) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldMembers, v))
}

// MembersLTE applies the LTE predicate on the "members" field.
func MembersLTE(v int) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldMembers, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSocials applies the HasEdge predicate on the "socials" edge.
func HasSocials() predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SocialsTable, SocialsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSocialsWith applies the HasEdge predicate on the "socials" edge with a given conditions (other predicates).
func HasSocialsWith(preds ...predicate.Social) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SocialsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SocialsTable, SocialsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompanies applies the HasEdge predicate on the "companies" edge.
func HasCompanies() predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CompaniesTable, CompaniesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompaniesWith applies the HasEdge predicate on the "companies" edge with a given conditions (other predicates).
func HasCompaniesWith(preds ...predicate.Company) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompaniesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CompaniesTable, CompaniesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAreas applies the HasEdge predicate on the "areas" edge.
func HasAreas() predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AreasTable, AreasPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAreasWith applies the HasEdge predicate on the "areas" edge with a given conditions (other predicates).
func HasAreasWith(preds ...predicate.Area) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AreasInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AreasTable, AreasPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Community) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Community) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Community) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		p(s.Not())
	})
}
