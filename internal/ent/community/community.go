// Code generated by ent, DO NOT EDIT.

package community

import (
	"time"
)

const (
	// Label holds the string label denoting the community type in the database.
	Label = "community"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAbout holds the string denoting the about field in the database.
	FieldAbout = "about"
	// FieldMembers holds the string denoting the members field in the database.
	FieldMembers = "members"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSocials holds the string denoting the socials edge name in mutations.
	EdgeSocials = "socials"
	// EdgeCompanies holds the string denoting the companies edge name in mutations.
	EdgeCompanies = "companies"
	// EdgeAreas holds the string denoting the areas edge name in mutations.
	EdgeAreas = "areas"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the community in the database.
	Table = "communities"
	// SocialsTable is the table that holds the socials relation/edge. The primary key declared below.
	SocialsTable = "social_communities"
	// SocialsInverseTable is the table name for the Social entity.
	// It exists in this package in order to avoid circular dependency with the "social" package.
	SocialsInverseTable = "socials"
	// CompaniesTable is the table that holds the companies relation/edge. The primary key declared below.
	CompaniesTable = "company_communities"
	// CompaniesInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompaniesInverseTable = "companies"
	// AreasTable is the table that holds the areas relation/edge. The primary key declared below.
	AreasTable = "area_communities"
	// AreasInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreasInverseTable = "areas"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "community_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for community fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAbout,
	FieldMembers,
	FieldCreatedAt,
}

var (
	// SocialsPrimaryKey and SocialsColumn2 are the table columns denoting the
	// primary key for the socials relation (M2M).
	SocialsPrimaryKey = []string{"social_id", "community_id"}
	// CompaniesPrimaryKey and CompaniesColumn2 are the table columns denoting the
	// primary key for the companies relation (M2M).
	CompaniesPrimaryKey = []string{"company_id", "community_id"}
	// AreasPrimaryKey and AreasColumn2 are the table columns denoting the
	// primary key for the areas relation (M2M).
	AreasPrimaryKey = []string{"area_id", "community_id"}
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"community_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// AboutValidator is a validator for the "about" field. It is called by the builders before save.
	AboutValidator func(string) error
	// MembersValidator is a validator for the "members" field. It is called by the builders before save.
	MembersValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
