// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/community"
	"github.com/logn-soft/logn-back/internal/ent/company"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
	"github.com/logn-soft/logn-back/internal/ent/social"
)

// SocialUpdate is the builder for updating Social entities.
type SocialUpdate struct {
	config
	hooks    []Hook
	mutation *SocialMutation
}

// Where appends a list predicates to the SocialUpdate builder.
func (su *SocialUpdate) Where(ps ...predicate.Social) *SocialUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetFb sets the "fb" field.
func (su *SocialUpdate) SetFb(s string) *SocialUpdate {
	su.mutation.SetFb(s)
	return su
}

// SetNillableFb sets the "fb" field if the given value is not nil.
func (su *SocialUpdate) SetNillableFb(s *string) *SocialUpdate {
	if s != nil {
		su.SetFb(*s)
	}
	return su
}

// ClearFb clears the value of the "fb" field.
func (su *SocialUpdate) ClearFb() *SocialUpdate {
	su.mutation.ClearFb()
	return su
}

// SetTwitter sets the "twitter" field.
func (su *SocialUpdate) SetTwitter(s string) *SocialUpdate {
	su.mutation.SetTwitter(s)
	return su
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (su *SocialUpdate) SetNillableTwitter(s *string) *SocialUpdate {
	if s != nil {
		su.SetTwitter(*s)
	}
	return su
}

// ClearTwitter clears the value of the "twitter" field.
func (su *SocialUpdate) ClearTwitter() *SocialUpdate {
	su.mutation.ClearTwitter()
	return su
}

// SetDiscord sets the "discord" field.
func (su *SocialUpdate) SetDiscord(s string) *SocialUpdate {
	su.mutation.SetDiscord(s)
	return su
}

// SetNillableDiscord sets the "discord" field if the given value is not nil.
func (su *SocialUpdate) SetNillableDiscord(s *string) *SocialUpdate {
	if s != nil {
		su.SetDiscord(*s)
	}
	return su
}

// ClearDiscord clears the value of the "discord" field.
func (su *SocialUpdate) ClearDiscord() *SocialUpdate {
	su.mutation.ClearDiscord()
	return su
}

// SetSlack sets the "slack" field.
func (su *SocialUpdate) SetSlack(s string) *SocialUpdate {
	su.mutation.SetSlack(s)
	return su
}

// SetNillableSlack sets the "slack" field if the given value is not nil.
func (su *SocialUpdate) SetNillableSlack(s *string) *SocialUpdate {
	if s != nil {
		su.SetSlack(*s)
	}
	return su
}

// ClearSlack clears the value of the "slack" field.
func (su *SocialUpdate) ClearSlack() *SocialUpdate {
	su.mutation.ClearSlack()
	return su
}

// SetOther sets the "other" field.
func (su *SocialUpdate) SetOther(s string) *SocialUpdate {
	su.mutation.SetOther(s)
	return su
}

// SetNillableOther sets the "other" field if the given value is not nil.
func (su *SocialUpdate) SetNillableOther(s *string) *SocialUpdate {
	if s != nil {
		su.SetOther(*s)
	}
	return su
}

// ClearOther clears the value of the "other" field.
func (su *SocialUpdate) ClearOther() *SocialUpdate {
	su.mutation.ClearOther()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SocialUpdate) SetCreatedAt(t time.Time) *SocialUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SocialUpdate) SetNillableCreatedAt(t *time.Time) *SocialUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (su *SocialUpdate) AddCompanyIDs(ids ...int) *SocialUpdate {
	su.mutation.AddCompanyIDs(ids...)
	return su
}

// AddCompanies adds the "companies" edges to the Company entity.
func (su *SocialUpdate) AddCompanies(c ...*Company) *SocialUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCompanyIDs(ids...)
}

// AddCommunityIDs adds the "communities" edge to the Community entity by IDs.
func (su *SocialUpdate) AddCommunityIDs(ids ...int) *SocialUpdate {
	su.mutation.AddCommunityIDs(ids...)
	return su
}

// AddCommunities adds the "communities" edges to the Community entity.
func (su *SocialUpdate) AddCommunities(c ...*Community) *SocialUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCommunityIDs(ids...)
}

// Mutation returns the SocialMutation object of the builder.
func (su *SocialUpdate) Mutation() *SocialMutation {
	return su.mutation
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (su *SocialUpdate) ClearCompanies() *SocialUpdate {
	su.mutation.ClearCompanies()
	return su
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (su *SocialUpdate) RemoveCompanyIDs(ids ...int) *SocialUpdate {
	su.mutation.RemoveCompanyIDs(ids...)
	return su
}

// RemoveCompanies removes "companies" edges to Company entities.
func (su *SocialUpdate) RemoveCompanies(c ...*Company) *SocialUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCompanyIDs(ids...)
}

// ClearCommunities clears all "communities" edges to the Community entity.
func (su *SocialUpdate) ClearCommunities() *SocialUpdate {
	su.mutation.ClearCommunities()
	return su
}

// RemoveCommunityIDs removes the "communities" edge to Community entities by IDs.
func (su *SocialUpdate) RemoveCommunityIDs(ids ...int) *SocialUpdate {
	su.mutation.RemoveCommunityIDs(ids...)
	return su
}

// RemoveCommunities removes "communities" edges to Community entities.
func (su *SocialUpdate) RemoveCommunities(c ...*Community) *SocialUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCommunityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SocialUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SocialMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SocialUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SocialUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SocialUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SocialUpdate) check() error {
	if v, ok := su.mutation.Fb(); ok {
		if err := social.FbValidator(v); err != nil {
			return &ValidationError{Name: "fb", err: fmt.Errorf(`ent: validator failed for field "Social.fb": %w`, err)}
		}
	}
	if v, ok := su.mutation.Twitter(); ok {
		if err := social.TwitterValidator(v); err != nil {
			return &ValidationError{Name: "twitter", err: fmt.Errorf(`ent: validator failed for field "Social.twitter": %w`, err)}
		}
	}
	if v, ok := su.mutation.Discord(); ok {
		if err := social.DiscordValidator(v); err != nil {
			return &ValidationError{Name: "discord", err: fmt.Errorf(`ent: validator failed for field "Social.discord": %w`, err)}
		}
	}
	if v, ok := su.mutation.Slack(); ok {
		if err := social.SlackValidator(v); err != nil {
			return &ValidationError{Name: "slack", err: fmt.Errorf(`ent: validator failed for field "Social.slack": %w`, err)}
		}
	}
	if v, ok := su.mutation.Other(); ok {
		if err := social.OtherValidator(v); err != nil {
			return &ValidationError{Name: "other", err: fmt.Errorf(`ent: validator failed for field "Social.other": %w`, err)}
		}
	}
	return nil
}

func (su *SocialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   social.Table,
			Columns: social.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: social.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Fb(); ok {
		_spec.SetField(social.FieldFb, field.TypeString, value)
	}
	if su.mutation.FbCleared() {
		_spec.ClearField(social.FieldFb, field.TypeString)
	}
	if value, ok := su.mutation.Twitter(); ok {
		_spec.SetField(social.FieldTwitter, field.TypeString, value)
	}
	if su.mutation.TwitterCleared() {
		_spec.ClearField(social.FieldTwitter, field.TypeString)
	}
	if value, ok := su.mutation.Discord(); ok {
		_spec.SetField(social.FieldDiscord, field.TypeString, value)
	}
	if su.mutation.DiscordCleared() {
		_spec.ClearField(social.FieldDiscord, field.TypeString)
	}
	if value, ok := su.mutation.Slack(); ok {
		_spec.SetField(social.FieldSlack, field.TypeString, value)
	}
	if su.mutation.SlackCleared() {
		_spec.ClearField(social.FieldSlack, field.TypeString)
	}
	if value, ok := su.mutation.Other(); ok {
		_spec.SetField(social.FieldOther, field.TypeString, value)
	}
	if su.mutation.OtherCleared() {
		_spec.ClearField(social.FieldOther, field.TypeString)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(social.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CompaniesTable,
			Columns: social.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !su.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CompaniesTable,
			Columns: social.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CompaniesTable,
			Columns: social.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CommunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CommunitiesTable,
			Columns: social.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCommunitiesIDs(); len(nodes) > 0 && !su.mutation.CommunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CommunitiesTable,
			Columns: social.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CommunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CommunitiesTable,
			Columns: social.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{social.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SocialUpdateOne is the builder for updating a single Social entity.
type SocialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SocialMutation
}

// SetFb sets the "fb" field.
func (suo *SocialUpdateOne) SetFb(s string) *SocialUpdateOne {
	suo.mutation.SetFb(s)
	return suo
}

// SetNillableFb sets the "fb" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableFb(s *string) *SocialUpdateOne {
	if s != nil {
		suo.SetFb(*s)
	}
	return suo
}

// ClearFb clears the value of the "fb" field.
func (suo *SocialUpdateOne) ClearFb() *SocialUpdateOne {
	suo.mutation.ClearFb()
	return suo
}

// SetTwitter sets the "twitter" field.
func (suo *SocialUpdateOne) SetTwitter(s string) *SocialUpdateOne {
	suo.mutation.SetTwitter(s)
	return suo
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableTwitter(s *string) *SocialUpdateOne {
	if s != nil {
		suo.SetTwitter(*s)
	}
	return suo
}

// ClearTwitter clears the value of the "twitter" field.
func (suo *SocialUpdateOne) ClearTwitter() *SocialUpdateOne {
	suo.mutation.ClearTwitter()
	return suo
}

// SetDiscord sets the "discord" field.
func (suo *SocialUpdateOne) SetDiscord(s string) *SocialUpdateOne {
	suo.mutation.SetDiscord(s)
	return suo
}

// SetNillableDiscord sets the "discord" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableDiscord(s *string) *SocialUpdateOne {
	if s != nil {
		suo.SetDiscord(*s)
	}
	return suo
}

// ClearDiscord clears the value of the "discord" field.
func (suo *SocialUpdateOne) ClearDiscord() *SocialUpdateOne {
	suo.mutation.ClearDiscord()
	return suo
}

// SetSlack sets the "slack" field.
func (suo *SocialUpdateOne) SetSlack(s string) *SocialUpdateOne {
	suo.mutation.SetSlack(s)
	return suo
}

// SetNillableSlack sets the "slack" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableSlack(s *string) *SocialUpdateOne {
	if s != nil {
		suo.SetSlack(*s)
	}
	return suo
}

// ClearSlack clears the value of the "slack" field.
func (suo *SocialUpdateOne) ClearSlack() *SocialUpdateOne {
	suo.mutation.ClearSlack()
	return suo
}

// SetOther sets the "other" field.
func (suo *SocialUpdateOne) SetOther(s string) *SocialUpdateOne {
	suo.mutation.SetOther(s)
	return suo
}

// SetNillableOther sets the "other" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableOther(s *string) *SocialUpdateOne {
	if s != nil {
		suo.SetOther(*s)
	}
	return suo
}

// ClearOther clears the value of the "other" field.
func (suo *SocialUpdateOne) ClearOther() *SocialUpdateOne {
	suo.mutation.ClearOther()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SocialUpdateOne) SetCreatedAt(t time.Time) *SocialUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableCreatedAt(t *time.Time) *SocialUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (suo *SocialUpdateOne) AddCompanyIDs(ids ...int) *SocialUpdateOne {
	suo.mutation.AddCompanyIDs(ids...)
	return suo
}

// AddCompanies adds the "companies" edges to the Company entity.
func (suo *SocialUpdateOne) AddCompanies(c ...*Company) *SocialUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCompanyIDs(ids...)
}

// AddCommunityIDs adds the "communities" edge to the Community entity by IDs.
func (suo *SocialUpdateOne) AddCommunityIDs(ids ...int) *SocialUpdateOne {
	suo.mutation.AddCommunityIDs(ids...)
	return suo
}

// AddCommunities adds the "communities" edges to the Community entity.
func (suo *SocialUpdateOne) AddCommunities(c ...*Community) *SocialUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCommunityIDs(ids...)
}

// Mutation returns the SocialMutation object of the builder.
func (suo *SocialUpdateOne) Mutation() *SocialMutation {
	return suo.mutation
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (suo *SocialUpdateOne) ClearCompanies() *SocialUpdateOne {
	suo.mutation.ClearCompanies()
	return suo
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (suo *SocialUpdateOne) RemoveCompanyIDs(ids ...int) *SocialUpdateOne {
	suo.mutation.RemoveCompanyIDs(ids...)
	return suo
}

// RemoveCompanies removes "companies" edges to Company entities.
func (suo *SocialUpdateOne) RemoveCompanies(c ...*Company) *SocialUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCompanyIDs(ids...)
}

// ClearCommunities clears all "communities" edges to the Community entity.
func (suo *SocialUpdateOne) ClearCommunities() *SocialUpdateOne {
	suo.mutation.ClearCommunities()
	return suo
}

// RemoveCommunityIDs removes the "communities" edge to Community entities by IDs.
func (suo *SocialUpdateOne) RemoveCommunityIDs(ids ...int) *SocialUpdateOne {
	suo.mutation.RemoveCommunityIDs(ids...)
	return suo
}

// RemoveCommunities removes "communities" edges to Community entities.
func (suo *SocialUpdateOne) RemoveCommunities(c ...*Community) *SocialUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCommunityIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SocialUpdateOne) Select(field string, fields ...string) *SocialUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Social entity.
func (suo *SocialUpdateOne) Save(ctx context.Context) (*Social, error) {
	return withHooks[*Social, SocialMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SocialUpdateOne) SaveX(ctx context.Context) *Social {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SocialUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SocialUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SocialUpdateOne) check() error {
	if v, ok := suo.mutation.Fb(); ok {
		if err := social.FbValidator(v); err != nil {
			return &ValidationError{Name: "fb", err: fmt.Errorf(`ent: validator failed for field "Social.fb": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Twitter(); ok {
		if err := social.TwitterValidator(v); err != nil {
			return &ValidationError{Name: "twitter", err: fmt.Errorf(`ent: validator failed for field "Social.twitter": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Discord(); ok {
		if err := social.DiscordValidator(v); err != nil {
			return &ValidationError{Name: "discord", err: fmt.Errorf(`ent: validator failed for field "Social.discord": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Slack(); ok {
		if err := social.SlackValidator(v); err != nil {
			return &ValidationError{Name: "slack", err: fmt.Errorf(`ent: validator failed for field "Social.slack": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Other(); ok {
		if err := social.OtherValidator(v); err != nil {
			return &ValidationError{Name: "other", err: fmt.Errorf(`ent: validator failed for field "Social.other": %w`, err)}
		}
	}
	return nil
}

func (suo *SocialUpdateOne) sqlSave(ctx context.Context) (_node *Social, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   social.Table,
			Columns: social.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: social.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Social.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, social.FieldID)
		for _, f := range fields {
			if !social.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != social.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Fb(); ok {
		_spec.SetField(social.FieldFb, field.TypeString, value)
	}
	if suo.mutation.FbCleared() {
		_spec.ClearField(social.FieldFb, field.TypeString)
	}
	if value, ok := suo.mutation.Twitter(); ok {
		_spec.SetField(social.FieldTwitter, field.TypeString, value)
	}
	if suo.mutation.TwitterCleared() {
		_spec.ClearField(social.FieldTwitter, field.TypeString)
	}
	if value, ok := suo.mutation.Discord(); ok {
		_spec.SetField(social.FieldDiscord, field.TypeString, value)
	}
	if suo.mutation.DiscordCleared() {
		_spec.ClearField(social.FieldDiscord, field.TypeString)
	}
	if value, ok := suo.mutation.Slack(); ok {
		_spec.SetField(social.FieldSlack, field.TypeString, value)
	}
	if suo.mutation.SlackCleared() {
		_spec.ClearField(social.FieldSlack, field.TypeString)
	}
	if value, ok := suo.mutation.Other(); ok {
		_spec.SetField(social.FieldOther, field.TypeString, value)
	}
	if suo.mutation.OtherCleared() {
		_spec.ClearField(social.FieldOther, field.TypeString)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(social.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CompaniesTable,
			Columns: social.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !suo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CompaniesTable,
			Columns: social.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CompaniesTable,
			Columns: social.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CommunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CommunitiesTable,
			Columns: social.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCommunitiesIDs(); len(nodes) > 0 && !suo.mutation.CommunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CommunitiesTable,
			Columns: social.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CommunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CommunitiesTable,
			Columns: social.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Social{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{social.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
