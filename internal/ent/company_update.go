// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/area"
	"github.com/logn-soft/logn-back/internal/ent/community"
	"github.com/logn-soft/logn-back/internal/ent/company"
	"github.com/logn-soft/logn-back/internal/ent/predicate"
	"github.com/logn-soft/logn-back/internal/ent/role"
	"github.com/logn-soft/logn-back/internal/ent/social"
	"github.com/logn-soft/logn-back/internal/ent/user"
	"github.com/logn-soft/logn-back/internal/ent/vacancy"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetEmploy sets the "employ" field.
func (cu *CompanyUpdate) SetEmploy(i int) *CompanyUpdate {
	cu.mutation.ResetEmploy()
	cu.mutation.SetEmploy(i)
	return cu
}

// AddEmploy adds i to the "employ" field.
func (cu *CompanyUpdate) AddEmploy(i int) *CompanyUpdate {
	cu.mutation.AddEmploy(i)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CompanyUpdate) SetCreatedAt(t time.Time) *CompanyUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCreatedAt(t *time.Time) *CompanyUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// AddSocialIDs adds the "socials" edge to the Social entity by IDs.
func (cu *CompanyUpdate) AddSocialIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddSocialIDs(ids...)
	return cu
}

// AddSocials adds the "socials" edges to the Social entity.
func (cu *CompanyUpdate) AddSocials(s ...*Social) *CompanyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSocialIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (cu *CompanyUpdate) AddRoleIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddRoleIDs(ids...)
	return cu
}

// AddRoles adds the "roles" edges to the Role entity.
func (cu *CompanyUpdate) AddRoles(r ...*Role) *CompanyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRoleIDs(ids...)
}

// AddVacancyIDs adds the "vacancies" edge to the Vacancy entity by IDs.
func (cu *CompanyUpdate) AddVacancyIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddVacancyIDs(ids...)
	return cu
}

// AddVacancies adds the "vacancies" edges to the Vacancy entity.
func (cu *CompanyUpdate) AddVacancies(v ...*Vacancy) *CompanyUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.AddVacancyIDs(ids...)
}

// AddAreaIDs adds the "areas" edge to the Area entity by IDs.
func (cu *CompanyUpdate) AddAreaIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddAreaIDs(ids...)
	return cu
}

// AddAreas adds the "areas" edges to the Area entity.
func (cu *CompanyUpdate) AddAreas(a ...*Area) *CompanyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAreaIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cu *CompanyUpdate) AddUserIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUsers adds the "users" edges to the User entity.
func (cu *CompanyUpdate) AddUsers(u ...*User) *CompanyUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// AddCommunityIDs adds the "communities" edge to the Community entity by IDs.
func (cu *CompanyUpdate) AddCommunityIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddCommunityIDs(ids...)
	return cu
}

// AddCommunities adds the "communities" edges to the Community entity.
func (cu *CompanyUpdate) AddCommunities(c ...*Community) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCommunityIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearSocials clears all "socials" edges to the Social entity.
func (cu *CompanyUpdate) ClearSocials() *CompanyUpdate {
	cu.mutation.ClearSocials()
	return cu
}

// RemoveSocialIDs removes the "socials" edge to Social entities by IDs.
func (cu *CompanyUpdate) RemoveSocialIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveSocialIDs(ids...)
	return cu
}

// RemoveSocials removes "socials" edges to Social entities.
func (cu *CompanyUpdate) RemoveSocials(s ...*Social) *CompanyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSocialIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (cu *CompanyUpdate) ClearRoles() *CompanyUpdate {
	cu.mutation.ClearRoles()
	return cu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (cu *CompanyUpdate) RemoveRoleIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveRoleIDs(ids...)
	return cu
}

// RemoveRoles removes "roles" edges to Role entities.
func (cu *CompanyUpdate) RemoveRoles(r ...*Role) *CompanyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRoleIDs(ids...)
}

// ClearVacancies clears all "vacancies" edges to the Vacancy entity.
func (cu *CompanyUpdate) ClearVacancies() *CompanyUpdate {
	cu.mutation.ClearVacancies()
	return cu
}

// RemoveVacancyIDs removes the "vacancies" edge to Vacancy entities by IDs.
func (cu *CompanyUpdate) RemoveVacancyIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveVacancyIDs(ids...)
	return cu
}

// RemoveVacancies removes "vacancies" edges to Vacancy entities.
func (cu *CompanyUpdate) RemoveVacancies(v ...*Vacancy) *CompanyUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.RemoveVacancyIDs(ids...)
}

// ClearAreas clears all "areas" edges to the Area entity.
func (cu *CompanyUpdate) ClearAreas() *CompanyUpdate {
	cu.mutation.ClearAreas()
	return cu
}

// RemoveAreaIDs removes the "areas" edge to Area entities by IDs.
func (cu *CompanyUpdate) RemoveAreaIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveAreaIDs(ids...)
	return cu
}

// RemoveAreas removes "areas" edges to Area entities.
func (cu *CompanyUpdate) RemoveAreas(a ...*Area) *CompanyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAreaIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cu *CompanyUpdate) ClearUsers() *CompanyUpdate {
	cu.mutation.ClearUsers()
	return cu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cu *CompanyUpdate) RemoveUserIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUsers removes "users" edges to User entities.
func (cu *CompanyUpdate) RemoveUsers(u ...*User) *CompanyUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// ClearCommunities clears all "communities" edges to the Community entity.
func (cu *CompanyUpdate) ClearCommunities() *CompanyUpdate {
	cu.mutation.ClearCommunities()
	return cu
}

// RemoveCommunityIDs removes the "communities" edge to Community entities by IDs.
func (cu *CompanyUpdate) RemoveCommunityIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveCommunityIDs(ids...)
	return cu
}

// RemoveCommunities removes "communities" edges to Community entities.
func (cu *CompanyUpdate) RemoveCommunities(c ...*Community) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCommunityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CompanyMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Employ(); ok {
		if err := company.EmployValidator(v); err != nil {
			return &ValidationError{Name: "employ", err: fmt.Errorf(`ent: validator failed for field "Company.employ": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: company.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Employ(); ok {
		_spec.SetField(company.FieldEmploy, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedEmploy(); ok {
		_spec.AddField(company.FieldEmploy, field.TypeInt, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(company.FieldCreatedAt, field.TypeTime, value)
	}
	if cu.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.SocialsTable,
			Columns: company.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSocialsIDs(); len(nodes) > 0 && !cu.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.SocialsTable,
			Columns: company.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SocialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.SocialsTable,
			Columns: company.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.RolesTable,
			Columns: company.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !cu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.RolesTable,
			Columns: company.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.RolesTable,
			Columns: company.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.VacanciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.VacanciesTable,
			Columns: company.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedVacanciesIDs(); len(nodes) > 0 && !cu.mutation.VacanciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.VacanciesTable,
			Columns: company.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.VacanciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.VacanciesTable,
			Columns: company.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.AreasTable,
			Columns: company.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAreasIDs(); len(nodes) > 0 && !cu.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.AreasTable,
			Columns: company.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AreasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.AreasTable,
			Columns: company.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CommunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CommunitiesTable,
			Columns: company.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCommunitiesIDs(); len(nodes) > 0 && !cu.mutation.CommunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CommunitiesTable,
			Columns: company.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CommunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CommunitiesTable,
			Columns: company.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetEmploy sets the "employ" field.
func (cuo *CompanyUpdateOne) SetEmploy(i int) *CompanyUpdateOne {
	cuo.mutation.ResetEmploy()
	cuo.mutation.SetEmploy(i)
	return cuo
}

// AddEmploy adds i to the "employ" field.
func (cuo *CompanyUpdateOne) AddEmploy(i int) *CompanyUpdateOne {
	cuo.mutation.AddEmploy(i)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CompanyUpdateOne) SetCreatedAt(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCreatedAt(t *time.Time) *CompanyUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// AddSocialIDs adds the "socials" edge to the Social entity by IDs.
func (cuo *CompanyUpdateOne) AddSocialIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddSocialIDs(ids...)
	return cuo
}

// AddSocials adds the "socials" edges to the Social entity.
func (cuo *CompanyUpdateOne) AddSocials(s ...*Social) *CompanyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSocialIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (cuo *CompanyUpdateOne) AddRoleIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddRoleIDs(ids...)
	return cuo
}

// AddRoles adds the "roles" edges to the Role entity.
func (cuo *CompanyUpdateOne) AddRoles(r ...*Role) *CompanyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRoleIDs(ids...)
}

// AddVacancyIDs adds the "vacancies" edge to the Vacancy entity by IDs.
func (cuo *CompanyUpdateOne) AddVacancyIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddVacancyIDs(ids...)
	return cuo
}

// AddVacancies adds the "vacancies" edges to the Vacancy entity.
func (cuo *CompanyUpdateOne) AddVacancies(v ...*Vacancy) *CompanyUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.AddVacancyIDs(ids...)
}

// AddAreaIDs adds the "areas" edge to the Area entity by IDs.
func (cuo *CompanyUpdateOne) AddAreaIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddAreaIDs(ids...)
	return cuo
}

// AddAreas adds the "areas" edges to the Area entity.
func (cuo *CompanyUpdateOne) AddAreas(a ...*Area) *CompanyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAreaIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cuo *CompanyUpdateOne) AddUserIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUsers adds the "users" edges to the User entity.
func (cuo *CompanyUpdateOne) AddUsers(u ...*User) *CompanyUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// AddCommunityIDs adds the "communities" edge to the Community entity by IDs.
func (cuo *CompanyUpdateOne) AddCommunityIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddCommunityIDs(ids...)
	return cuo
}

// AddCommunities adds the "communities" edges to the Community entity.
func (cuo *CompanyUpdateOne) AddCommunities(c ...*Community) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCommunityIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearSocials clears all "socials" edges to the Social entity.
func (cuo *CompanyUpdateOne) ClearSocials() *CompanyUpdateOne {
	cuo.mutation.ClearSocials()
	return cuo
}

// RemoveSocialIDs removes the "socials" edge to Social entities by IDs.
func (cuo *CompanyUpdateOne) RemoveSocialIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveSocialIDs(ids...)
	return cuo
}

// RemoveSocials removes "socials" edges to Social entities.
func (cuo *CompanyUpdateOne) RemoveSocials(s ...*Social) *CompanyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSocialIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (cuo *CompanyUpdateOne) ClearRoles() *CompanyUpdateOne {
	cuo.mutation.ClearRoles()
	return cuo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (cuo *CompanyUpdateOne) RemoveRoleIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveRoleIDs(ids...)
	return cuo
}

// RemoveRoles removes "roles" edges to Role entities.
func (cuo *CompanyUpdateOne) RemoveRoles(r ...*Role) *CompanyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRoleIDs(ids...)
}

// ClearVacancies clears all "vacancies" edges to the Vacancy entity.
func (cuo *CompanyUpdateOne) ClearVacancies() *CompanyUpdateOne {
	cuo.mutation.ClearVacancies()
	return cuo
}

// RemoveVacancyIDs removes the "vacancies" edge to Vacancy entities by IDs.
func (cuo *CompanyUpdateOne) RemoveVacancyIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveVacancyIDs(ids...)
	return cuo
}

// RemoveVacancies removes "vacancies" edges to Vacancy entities.
func (cuo *CompanyUpdateOne) RemoveVacancies(v ...*Vacancy) *CompanyUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.RemoveVacancyIDs(ids...)
}

// ClearAreas clears all "areas" edges to the Area entity.
func (cuo *CompanyUpdateOne) ClearAreas() *CompanyUpdateOne {
	cuo.mutation.ClearAreas()
	return cuo
}

// RemoveAreaIDs removes the "areas" edge to Area entities by IDs.
func (cuo *CompanyUpdateOne) RemoveAreaIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveAreaIDs(ids...)
	return cuo
}

// RemoveAreas removes "areas" edges to Area entities.
func (cuo *CompanyUpdateOne) RemoveAreas(a ...*Area) *CompanyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAreaIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cuo *CompanyUpdateOne) ClearUsers() *CompanyUpdateOne {
	cuo.mutation.ClearUsers()
	return cuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cuo *CompanyUpdateOne) RemoveUserIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUsers removes "users" edges to User entities.
func (cuo *CompanyUpdateOne) RemoveUsers(u ...*User) *CompanyUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// ClearCommunities clears all "communities" edges to the Community entity.
func (cuo *CompanyUpdateOne) ClearCommunities() *CompanyUpdateOne {
	cuo.mutation.ClearCommunities()
	return cuo
}

// RemoveCommunityIDs removes the "communities" edge to Community entities by IDs.
func (cuo *CompanyUpdateOne) RemoveCommunityIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveCommunityIDs(ids...)
	return cuo
}

// RemoveCommunities removes "communities" edges to Community entities.
func (cuo *CompanyUpdateOne) RemoveCommunities(c ...*Community) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCommunityIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	return withHooks[*Company, CompanyMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Employ(); ok {
		if err := company.EmployValidator(v); err != nil {
			return &ValidationError{Name: "employ", err: fmt.Errorf(`ent: validator failed for field "Company.employ": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: company.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Employ(); ok {
		_spec.SetField(company.FieldEmploy, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedEmploy(); ok {
		_spec.AddField(company.FieldEmploy, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(company.FieldCreatedAt, field.TypeTime, value)
	}
	if cuo.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.SocialsTable,
			Columns: company.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSocialsIDs(); len(nodes) > 0 && !cuo.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.SocialsTable,
			Columns: company.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SocialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.SocialsTable,
			Columns: company.SocialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.RolesTable,
			Columns: company.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !cuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.RolesTable,
			Columns: company.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.RolesTable,
			Columns: company.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.VacanciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.VacanciesTable,
			Columns: company.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedVacanciesIDs(); len(nodes) > 0 && !cuo.mutation.VacanciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.VacanciesTable,
			Columns: company.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.VacanciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.VacanciesTable,
			Columns: company.VacanciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vacancy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.AreasTable,
			Columns: company.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAreasIDs(); len(nodes) > 0 && !cuo.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.AreasTable,
			Columns: company.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AreasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   company.AreasTable,
			Columns: company.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: company.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CommunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CommunitiesTable,
			Columns: company.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCommunitiesIDs(); len(nodes) > 0 && !cuo.mutation.CommunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CommunitiesTable,
			Columns: company.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CommunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CommunitiesTable,
			Columns: company.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
