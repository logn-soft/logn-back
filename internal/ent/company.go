// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/logn-soft/logn-back/internal/ent/company"
)

// Company is the model entity for the Company schema.
type Company struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Employ holds the value of the "employ" field.
	Employ int `json:"employ,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyQuery when eager-loading is set.
	Edges CompanyEdges `json:"edges"`
}

// CompanyEdges holds the relations/edges for other nodes in the graph.
type CompanyEdges struct {
	// Socials holds the value of the socials edge.
	Socials []*Social `json:"socials,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// Vacancies holds the value of the vacancies edge.
	Vacancies []*Vacancy `json:"vacancies,omitempty"`
	// Areas holds the value of the areas edge.
	Areas []*Area `json:"areas,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Communities holds the value of the communities edge.
	Communities []*Community `json:"communities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// SocialsOrErr returns the Socials value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) SocialsOrErr() ([]*Social, error) {
	if e.loadedTypes[0] {
		return e.Socials, nil
	}
	return nil, &NotLoadedError{edge: "socials"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[1] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// VacanciesOrErr returns the Vacancies value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) VacanciesOrErr() ([]*Vacancy, error) {
	if e.loadedTypes[2] {
		return e.Vacancies, nil
	}
	return nil, &NotLoadedError{edge: "vacancies"}
}

// AreasOrErr returns the Areas value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) AreasOrErr() ([]*Area, error) {
	if e.loadedTypes[3] {
		return e.Areas, nil
	}
	return nil, &NotLoadedError{edge: "areas"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// CommunitiesOrErr returns the Communities value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) CommunitiesOrErr() ([]*Community, error) {
	if e.loadedTypes[5] {
		return e.Communities, nil
	}
	return nil, &NotLoadedError{edge: "communities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Company) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case company.FieldID, company.FieldEmploy:
			values[i] = new(sql.NullInt64)
		case company.FieldName:
			values[i] = new(sql.NullString)
		case company.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Company", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Company fields.
func (c *Company) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case company.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case company.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case company.FieldEmploy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employ", values[i])
			} else if value.Valid {
				c.Employ = int(value.Int64)
			}
		case company.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QuerySocials queries the "socials" edge of the Company entity.
func (c *Company) QuerySocials() *SocialQuery {
	return NewCompanyClient(c.config).QuerySocials(c)
}

// QueryRoles queries the "roles" edge of the Company entity.
func (c *Company) QueryRoles() *RoleQuery {
	return NewCompanyClient(c.config).QueryRoles(c)
}

// QueryVacancies queries the "vacancies" edge of the Company entity.
func (c *Company) QueryVacancies() *VacancyQuery {
	return NewCompanyClient(c.config).QueryVacancies(c)
}

// QueryAreas queries the "areas" edge of the Company entity.
func (c *Company) QueryAreas() *AreaQuery {
	return NewCompanyClient(c.config).QueryAreas(c)
}

// QueryUsers queries the "users" edge of the Company entity.
func (c *Company) QueryUsers() *UserQuery {
	return NewCompanyClient(c.config).QueryUsers(c)
}

// QueryCommunities queries the "communities" edge of the Company entity.
func (c *Company) QueryCommunities() *CommunityQuery {
	return NewCompanyClient(c.config).QueryCommunities(c)
}

// Update returns a builder for updating this Company.
// Note that you need to call Company.Unwrap() before calling this method if this Company
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Company) Update() *CompanyUpdateOne {
	return NewCompanyClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Company entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Company) Unwrap() *Company {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Company is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Company) String() string {
	var builder strings.Builder
	builder.WriteString("Company(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("employ=")
	builder.WriteString(fmt.Sprintf("%v", c.Employ))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Companies is a parsable slice of Company.
type Companies []*Company

func (c Companies) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
