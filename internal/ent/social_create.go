// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logn-soft/logn-back/internal/ent/community"
	"github.com/logn-soft/logn-back/internal/ent/company"
	"github.com/logn-soft/logn-back/internal/ent/social"
)

// SocialCreate is the builder for creating a Social entity.
type SocialCreate struct {
	config
	mutation *SocialMutation
	hooks    []Hook
}

// SetFb sets the "fb" field.
func (sc *SocialCreate) SetFb(s string) *SocialCreate {
	sc.mutation.SetFb(s)
	return sc
}

// SetNillableFb sets the "fb" field if the given value is not nil.
func (sc *SocialCreate) SetNillableFb(s *string) *SocialCreate {
	if s != nil {
		sc.SetFb(*s)
	}
	return sc
}

// SetTwitter sets the "twitter" field.
func (sc *SocialCreate) SetTwitter(s string) *SocialCreate {
	sc.mutation.SetTwitter(s)
	return sc
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (sc *SocialCreate) SetNillableTwitter(s *string) *SocialCreate {
	if s != nil {
		sc.SetTwitter(*s)
	}
	return sc
}

// SetDiscord sets the "discord" field.
func (sc *SocialCreate) SetDiscord(s string) *SocialCreate {
	sc.mutation.SetDiscord(s)
	return sc
}

// SetNillableDiscord sets the "discord" field if the given value is not nil.
func (sc *SocialCreate) SetNillableDiscord(s *string) *SocialCreate {
	if s != nil {
		sc.SetDiscord(*s)
	}
	return sc
}

// SetSlack sets the "slack" field.
func (sc *SocialCreate) SetSlack(s string) *SocialCreate {
	sc.mutation.SetSlack(s)
	return sc
}

// SetNillableSlack sets the "slack" field if the given value is not nil.
func (sc *SocialCreate) SetNillableSlack(s *string) *SocialCreate {
	if s != nil {
		sc.SetSlack(*s)
	}
	return sc
}

// SetOther sets the "other" field.
func (sc *SocialCreate) SetOther(s string) *SocialCreate {
	sc.mutation.SetOther(s)
	return sc
}

// SetNillableOther sets the "other" field if the given value is not nil.
func (sc *SocialCreate) SetNillableOther(s *string) *SocialCreate {
	if s != nil {
		sc.SetOther(*s)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SocialCreate) SetCreatedAt(t time.Time) *SocialCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SocialCreate) SetNillableCreatedAt(t *time.Time) *SocialCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (sc *SocialCreate) AddCompanyIDs(ids ...int) *SocialCreate {
	sc.mutation.AddCompanyIDs(ids...)
	return sc
}

// AddCompanies adds the "companies" edges to the Company entity.
func (sc *SocialCreate) AddCompanies(c ...*Company) *SocialCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCompanyIDs(ids...)
}

// AddCommunityIDs adds the "communities" edge to the Community entity by IDs.
func (sc *SocialCreate) AddCommunityIDs(ids ...int) *SocialCreate {
	sc.mutation.AddCommunityIDs(ids...)
	return sc
}

// AddCommunities adds the "communities" edges to the Community entity.
func (sc *SocialCreate) AddCommunities(c ...*Community) *SocialCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCommunityIDs(ids...)
}

// Mutation returns the SocialMutation object of the builder.
func (sc *SocialCreate) Mutation() *SocialMutation {
	return sc.mutation
}

// Save creates the Social in the database.
func (sc *SocialCreate) Save(ctx context.Context) (*Social, error) {
	sc.defaults()
	return withHooks[*Social, SocialMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SocialCreate) SaveX(ctx context.Context) *Social {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SocialCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SocialCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SocialCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := social.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SocialCreate) check() error {
	if v, ok := sc.mutation.Fb(); ok {
		if err := social.FbValidator(v); err != nil {
			return &ValidationError{Name: "fb", err: fmt.Errorf(`ent: validator failed for field "Social.fb": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Twitter(); ok {
		if err := social.TwitterValidator(v); err != nil {
			return &ValidationError{Name: "twitter", err: fmt.Errorf(`ent: validator failed for field "Social.twitter": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Discord(); ok {
		if err := social.DiscordValidator(v); err != nil {
			return &ValidationError{Name: "discord", err: fmt.Errorf(`ent: validator failed for field "Social.discord": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Slack(); ok {
		if err := social.SlackValidator(v); err != nil {
			return &ValidationError{Name: "slack", err: fmt.Errorf(`ent: validator failed for field "Social.slack": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Other(); ok {
		if err := social.OtherValidator(v); err != nil {
			return &ValidationError{Name: "other", err: fmt.Errorf(`ent: validator failed for field "Social.other": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Social.created_at"`)}
	}
	return nil
}

func (sc *SocialCreate) sqlSave(ctx context.Context) (*Social, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SocialCreate) createSpec() (*Social, *sqlgraph.CreateSpec) {
	var (
		_node = &Social{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: social.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: social.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Fb(); ok {
		_spec.SetField(social.FieldFb, field.TypeString, value)
		_node.Fb = value
	}
	if value, ok := sc.mutation.Twitter(); ok {
		_spec.SetField(social.FieldTwitter, field.TypeString, value)
		_node.Twitter = value
	}
	if value, ok := sc.mutation.Discord(); ok {
		_spec.SetField(social.FieldDiscord, field.TypeString, value)
		_node.Discord = value
	}
	if value, ok := sc.mutation.Slack(); ok {
		_spec.SetField(social.FieldSlack, field.TypeString, value)
		_node.Slack = value
	}
	if value, ok := sc.mutation.Other(); ok {
		_spec.SetField(social.FieldOther, field.TypeString, value)
		_node.Other = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(social.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sc.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CompaniesTable,
			Columns: social.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CommunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   social.CommunitiesTable,
			Columns: social.CommunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: community.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SocialCreateBulk is the builder for creating many Social entities in bulk.
type SocialCreateBulk struct {
	config
	builders []*SocialCreate
}

// Save creates the Social entities in the database.
func (scb *SocialCreateBulk) Save(ctx context.Context) ([]*Social, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Social, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SocialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SocialCreateBulk) SaveX(ctx context.Context) []*Social {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SocialCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SocialCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
